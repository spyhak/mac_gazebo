// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collision_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_collision_2eproto() {
  protobuf_AddDesc_collision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "collision.proto");
  GOOGLE_CHECK(file != NULL);
  Collision_descriptor_ = file->message_type(0);
  static const int Collision_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, laser_retro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, max_contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, visual_),
  };
  Collision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Collision_descriptor_,
      Collision::default_instance_,
      Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Collision));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_collision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Collision_descriptor_, &Collision::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_collision_2eproto() {
  delete Collision::default_instance_;
  delete Collision_reflection_;
}

void protobuf_AddDesc_collision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_header_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_geometry_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_surface_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_visual_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017collision.proto\022\013gazebo.msgs\032\014header.p"
    "roto\032\npose.proto\032\016geometry.proto\032\rsurfac"
    "e.proto\032\014visual.proto\"\346\001\n\tCollision\022\n\n\002i"
    "d\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\023\n\013laser_retro\030\003 \001"
    "(\001\022\024\n\014max_contacts\030\004 \001(\001\022\037\n\004pose\030\005 \001(\0132\021"
    ".gazebo.msgs.Pose\022\'\n\010geometry\030\006 \001(\0132\025.ga"
    "zebo.msgs.Geometry\022%\n\007surface\030\007 \001(\0132\024.ga"
    "zebo.msgs.Surface\022#\n\006visual\030\010 \003(\0132\023.gaze"
    "bo.msgs.Visual", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collision.proto", &protobuf_RegisterTypes);
  Collision::default_instance_ = new Collision();
  Collision::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_collision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_collision_2eproto {
  StaticDescriptorInitializer_collision_2eproto() {
    protobuf_AddDesc_collision_2eproto();
  }
} static_descriptor_initializer_collision_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Collision::kIdFieldNumber;
const int Collision::kNameFieldNumber;
const int Collision::kLaserRetroFieldNumber;
const int Collision::kMaxContactsFieldNumber;
const int Collision::kPoseFieldNumber;
const int Collision::kGeometryFieldNumber;
const int Collision::kSurfaceFieldNumber;
const int Collision::kVisualFieldNumber;
#endif  // !_MSC_VER

Collision::Collision()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Collision::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  geometry_ = const_cast< ::gazebo::msgs::Geometry*>(&::gazebo::msgs::Geometry::default_instance());
  surface_ = const_cast< ::gazebo::msgs::Surface*>(&::gazebo::msgs::Surface::default_instance());
}

Collision::Collision(const Collision& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Collision::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  laser_retro_ = 0;
  max_contacts_ = 0;
  pose_ = NULL;
  geometry_ = NULL;
  surface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collision::~Collision() {
  SharedDtor();
}

void Collision::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pose_;
    delete geometry_;
    delete surface_;
  }
}

void Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collision_descriptor_;
}

const Collision& Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collision_2eproto();
  return *default_instance_;
}

Collision* Collision::default_instance_ = NULL;

Collision* Collision::New() const {
  return new Collision;
}

void Collision::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    laser_retro_ = 0;
    max_contacts_ = 0;
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::gazebo::msgs::Geometry::Clear();
    }
    if (has_surface()) {
      if (surface_ != NULL) surface_->::gazebo::msgs::Surface::Clear();
    }
  }
  visual_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_laser_retro;
        break;
      }

      // optional double laser_retro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_laser_retro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_retro_)));
          set_has_laser_retro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_max_contacts;
        break;
      }

      // optional double max_contacts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_contacts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_contacts_)));
          set_has_max_contacts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_geometry;
        break;
      }

      // optional .gazebo.msgs.Geometry geometry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_surface;
        break;
      }

      // optional .gazebo.msgs.Surface surface = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_visual;
        break;
      }

      // repeated .gazebo.msgs.Visual visual = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_visual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_visual()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_visual;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional double laser_retro = 3;
  if (has_laser_retro()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->laser_retro(), output);
  }

  // optional double max_contacts = 4;
  if (has_max_contacts()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_contacts(), output);
  }

  // optional .gazebo.msgs.Pose pose = 5;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pose(), output);
  }

  // optional .gazebo.msgs.Geometry geometry = 6;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->geometry(), output);
  }

  // optional .gazebo.msgs.Surface surface = 7;
  if (has_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->surface(), output);
  }

  // repeated .gazebo.msgs.Visual visual = 8;
  for (int i = 0; i < this->visual_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->visual(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Collision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double laser_retro = 3;
  if (has_laser_retro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->laser_retro(), target);
  }

  // optional double max_contacts = 4;
  if (has_max_contacts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_contacts(), target);
  }

  // optional .gazebo.msgs.Pose pose = 5;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pose(), target);
  }

  // optional .gazebo.msgs.Geometry geometry = 6;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->geometry(), target);
  }

  // optional .gazebo.msgs.Surface surface = 7;
  if (has_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->surface(), target);
  }

  // repeated .gazebo.msgs.Visual visual = 8;
  for (int i = 0; i < this->visual_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->visual(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Collision::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double laser_retro = 3;
    if (has_laser_retro()) {
      total_size += 1 + 8;
    }

    // optional double max_contacts = 4;
    if (has_max_contacts()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.Pose pose = 5;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .gazebo.msgs.Geometry geometry = 6;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .gazebo.msgs.Surface surface = 7;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surface());
    }

  }
  // repeated .gazebo.msgs.Visual visual = 8;
  total_size += 1 * this->visual_size();
  for (int i = 0; i < this->visual_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visual(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Collision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Collision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Collision::MergeFrom(const Collision& from) {
  GOOGLE_CHECK_NE(&from, this);
  visual_.MergeFrom(from.visual_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_laser_retro()) {
      set_laser_retro(from.laser_retro());
    }
    if (from.has_max_contacts()) {
      set_max_contacts(from.max_contacts());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::gazebo::msgs::Geometry::MergeFrom(from.geometry());
    }
    if (from.has_surface()) {
      mutable_surface()->::gazebo::msgs::Surface::MergeFrom(from.surface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Collision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collision::CopyFrom(const Collision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_surface()) {
    if (!this->surface().IsInitialized()) return false;
  }
  for (int i = 0; i < visual_size(); i++) {
    if (!this->visual(i).IsInitialized()) return false;
  }
  return true;
}

void Collision::Swap(Collision* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(laser_retro_, other->laser_retro_);
    std::swap(max_contacts_, other->max_contacts_);
    std::swap(pose_, other->pose_);
    std::swap(geometry_, other->geometry_);
    std::swap(surface_, other->surface_);
    visual_.Swap(&other->visual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collision_descriptor_;
  metadata.reflection = Collision_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Collision", Collision)
// @@protoc_insertion_point(global_scope)
