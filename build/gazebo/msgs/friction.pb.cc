// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Friction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friction_2eproto() {
  protobuf_AddDesc_friction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friction.proto");
  GOOGLE_CHECK(file != NULL);
  Friction_descriptor_ = file->message_type(0);
  static const int Friction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, mu2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, fdir1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, slip1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, slip2_),
  };
  Friction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friction_descriptor_,
      Friction::default_instance_,
      Friction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friction));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friction_descriptor_, &Friction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friction_2eproto() {
  delete Friction::default_instance_;
  delete Friction_reflection_;
}

void protobuf_AddDesc_friction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016friction.proto\022\013gazebo.msgs\032\016vector3d."
    "proto\"g\n\010Friction\022\n\n\002mu\030\001 \001(\001\022\013\n\003mu2\030\002 \001"
    "(\001\022$\n\005fdir1\030\003 \001(\0132\025.gazebo.msgs.Vector3d"
    "\022\r\n\005slip1\030\004 \001(\001\022\r\n\005slip2\030\005 \001(\001", 150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friction.proto", &protobuf_RegisterTypes);
  Friction::default_instance_ = new Friction();
  Friction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friction_2eproto {
  StaticDescriptorInitializer_friction_2eproto() {
    protobuf_AddDesc_friction_2eproto();
  }
} static_descriptor_initializer_friction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Friction::kMuFieldNumber;
const int Friction::kMu2FieldNumber;
const int Friction::kFdir1FieldNumber;
const int Friction::kSlip1FieldNumber;
const int Friction::kSlip2FieldNumber;
#endif  // !_MSC_VER

Friction::Friction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friction::InitAsDefaultInstance() {
  fdir1_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Friction::Friction(const Friction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friction::SharedCtor() {
  _cached_size_ = 0;
  mu_ = 0;
  mu2_ = 0;
  fdir1_ = NULL;
  slip1_ = 0;
  slip2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friction::~Friction() {
  SharedDtor();
}

void Friction::SharedDtor() {
  if (this != default_instance_) {
    delete fdir1_;
  }
}

void Friction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friction_descriptor_;
}

const Friction& Friction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friction_2eproto();
  return *default_instance_;
}

Friction* Friction::default_instance_ = NULL;

Friction* Friction::New() const {
  return new Friction;
}

void Friction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mu_ = 0;
    mu2_ = 0;
    if (has_fdir1()) {
      if (fdir1_ != NULL) fdir1_->::gazebo::msgs::Vector3d::Clear();
    }
    slip1_ = 0;
    slip2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_)));
          set_has_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mu2;
        break;
      }

      // optional double mu2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mu2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu2_)));
          set_has_mu2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fdir1;
        break;
      }

      // optional .gazebo.msgs.Vector3d fdir1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fdir1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fdir1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_slip1;
        break;
      }

      // optional double slip1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_slip1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip1_)));
          set_has_slip1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_slip2;
        break;
      }

      // optional double slip2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_slip2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip2_)));
          set_has_slip2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double mu = 1;
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mu(), output);
  }

  // optional double mu2 = 2;
  if (has_mu2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mu2(), output);
  }

  // optional .gazebo.msgs.Vector3d fdir1 = 3;
  if (has_fdir1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fdir1(), output);
  }

  // optional double slip1 = 4;
  if (has_slip1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->slip1(), output);
  }

  // optional double slip2 = 5;
  if (has_slip2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->slip2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double mu = 1;
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mu(), target);
  }

  // optional double mu2 = 2;
  if (has_mu2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mu2(), target);
  }

  // optional .gazebo.msgs.Vector3d fdir1 = 3;
  if (has_fdir1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fdir1(), target);
  }

  // optional double slip1 = 4;
  if (has_slip1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->slip1(), target);
  }

  // optional double slip2 = 5;
  if (has_slip2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->slip2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double mu = 1;
    if (has_mu()) {
      total_size += 1 + 8;
    }

    // optional double mu2 = 2;
    if (has_mu2()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.Vector3d fdir1 = 3;
    if (has_fdir1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fdir1());
    }

    // optional double slip1 = 4;
    if (has_slip1()) {
      total_size += 1 + 8;
    }

    // optional double slip2 = 5;
    if (has_slip2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friction::MergeFrom(const Friction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mu()) {
      set_mu(from.mu());
    }
    if (from.has_mu2()) {
      set_mu2(from.mu2());
    }
    if (from.has_fdir1()) {
      mutable_fdir1()->::gazebo::msgs::Vector3d::MergeFrom(from.fdir1());
    }
    if (from.has_slip1()) {
      set_slip1(from.slip1());
    }
    if (from.has_slip2()) {
      set_slip2(from.slip2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friction::CopyFrom(const Friction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friction::IsInitialized() const {

  if (has_fdir1()) {
    if (!this->fdir1().IsInitialized()) return false;
  }
  return true;
}

void Friction::Swap(Friction* other) {
  if (other != this) {
    std::swap(mu_, other->mu_);
    std::swap(mu2_, other->mu2_);
    std::swap(fdir1_, other->fdir1_);
    std::swap(slip1_, other->slip1_);
    std::swap(slip2_, other->slip2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friction_descriptor_;
  metadata.reflection = Friction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Friction", Friction)
// @@protoc_insertion_point(global_scope)
