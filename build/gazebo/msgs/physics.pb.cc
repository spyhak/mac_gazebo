// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: physics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "physics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Physics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Physics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Physics_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_physics_2eproto() {
  protobuf_AddDesc_physics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "physics.proto");
  GOOGLE_CHECK(file != NULL);
  Physics_descriptor_ = file->message_type(0);
  static const int Physics_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, solver_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, min_step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, precon_iters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, iters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, sor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, contact_max_correcting_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, contact_surface_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, gravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, update_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, enable_physics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, real_time_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, real_time_update_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, max_step_size_),
  };
  Physics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Physics_descriptor_,
      Physics::default_instance_,
      Physics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Physics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Physics));
  Physics_Type_descriptor_ = Physics_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_physics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Physics_descriptor_, &Physics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_physics_2eproto() {
  delete Physics::default_instance_;
  delete Physics_reflection_;
}

void protobuf_AddDesc_physics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rphysics.proto\022\013gazebo.msgs\032\016vector3d.p"
    "roto\032\014header.proto\"\300\003\n\007Physics\022,\n\004type\030\002"
    " \002(\0162\031.gazebo.msgs.Physics.Type:\003ODE\022\023\n\013"
    "solver_type\030\003 \001(\t\022\n\n\002dt\030\004 \001(\001\022\025\n\rmin_ste"
    "p_size\030\005 \001(\001\022\024\n\014precon_iters\030\006 \001(\005\022\r\n\005it"
    "ers\030\007 \001(\005\022\013\n\003sor\030\010 \001(\001\022\013\n\003cfm\030\t \001(\001\022\013\n\003e"
    "rp\030\n \001(\001\022\"\n\032contact_max_correcting_vel\030\013"
    " \001(\001\022\035\n\025contact_surface_layer\030\014 \001(\001\022&\n\007g"
    "ravity\030\r \001(\0132\025.gazebo.msgs.Vector3d\022\023\n\013u"
    "pdate_rate\030\016 \001(\001\022\026\n\016enable_physics\030\017 \001(\010"
    "\022\030\n\020real_time_factor\030\020 \001(\001\022\035\n\025real_time_"
    "update_rate\030\021 \001(\001\022\025\n\rmax_step_size\030\022 \001(\001"
    "\"\033\n\004Type\022\007\n\003ODE\020\001\022\n\n\006BULLET\020\002", 509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "physics.proto", &protobuf_RegisterTypes);
  Physics::default_instance_ = new Physics();
  Physics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_physics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_physics_2eproto {
  StaticDescriptorInitializer_physics_2eproto() {
    protobuf_AddDesc_physics_2eproto();
  }
} static_descriptor_initializer_physics_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Physics_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Physics_Type_descriptor_;
}
bool Physics_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Physics_Type Physics::ODE;
const Physics_Type Physics::BULLET;
const Physics_Type Physics::Type_MIN;
const Physics_Type Physics::Type_MAX;
const int Physics::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Physics::kTypeFieldNumber;
const int Physics::kSolverTypeFieldNumber;
const int Physics::kDtFieldNumber;
const int Physics::kMinStepSizeFieldNumber;
const int Physics::kPreconItersFieldNumber;
const int Physics::kItersFieldNumber;
const int Physics::kSorFieldNumber;
const int Physics::kCfmFieldNumber;
const int Physics::kErpFieldNumber;
const int Physics::kContactMaxCorrectingVelFieldNumber;
const int Physics::kContactSurfaceLayerFieldNumber;
const int Physics::kGravityFieldNumber;
const int Physics::kUpdateRateFieldNumber;
const int Physics::kEnablePhysicsFieldNumber;
const int Physics::kRealTimeFactorFieldNumber;
const int Physics::kRealTimeUpdateRateFieldNumber;
const int Physics::kMaxStepSizeFieldNumber;
#endif  // !_MSC_VER

Physics::Physics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Physics::InitAsDefaultInstance() {
  gravity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Physics::Physics(const Physics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Physics::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  solver_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dt_ = 0;
  min_step_size_ = 0;
  precon_iters_ = 0;
  iters_ = 0;
  sor_ = 0;
  cfm_ = 0;
  erp_ = 0;
  contact_max_correcting_vel_ = 0;
  contact_surface_layer_ = 0;
  gravity_ = NULL;
  update_rate_ = 0;
  enable_physics_ = false;
  real_time_factor_ = 0;
  real_time_update_rate_ = 0;
  max_step_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Physics::~Physics() {
  SharedDtor();
}

void Physics::SharedDtor() {
  if (solver_type_ != &::google::protobuf::internal::kEmptyString) {
    delete solver_type_;
  }
  if (this != default_instance_) {
    delete gravity_;
  }
}

void Physics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Physics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Physics_descriptor_;
}

const Physics& Physics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_physics_2eproto();
  return *default_instance_;
}

Physics* Physics::default_instance_ = NULL;

Physics* Physics::New() const {
  return new Physics;
}

void Physics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_solver_type()) {
      if (solver_type_ != &::google::protobuf::internal::kEmptyString) {
        solver_type_->clear();
      }
    }
    dt_ = 0;
    min_step_size_ = 0;
    precon_iters_ = 0;
    iters_ = 0;
    sor_ = 0;
    cfm_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    erp_ = 0;
    contact_max_correcting_vel_ = 0;
    contact_surface_layer_ = 0;
    if (has_gravity()) {
      if (gravity_ != NULL) gravity_->::gazebo::msgs::Vector3d::Clear();
    }
    update_rate_ = 0;
    enable_physics_ = false;
    real_time_factor_ = 0;
    real_time_update_rate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_step_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Physics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Physics.Type type = 2 [default = ODE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Physics_Type_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::Physics_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_solver_type;
        break;
      }

      // optional string solver_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solver_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->solver_type().data(), this->solver_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dt;
        break;
      }

      // optional double dt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_min_step_size;
        break;
      }

      // optional double min_step_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_step_size_)));
          set_has_min_step_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_precon_iters;
        break;
      }

      // optional int32 precon_iters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precon_iters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precon_iters_)));
          set_has_precon_iters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iters;
        break;
      }

      // optional int32 iters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iters_)));
          set_has_iters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_sor;
        break;
      }

      // optional double sor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sor_)));
          set_has_sor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_cfm;
        break;
      }

      // optional double cfm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_erp;
        break;
      }

      // optional double erp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_erp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &erp_)));
          set_has_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_contact_max_correcting_vel;
        break;
      }

      // optional double contact_max_correcting_vel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contact_max_correcting_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contact_max_correcting_vel_)));
          set_has_contact_max_correcting_vel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_contact_surface_layer;
        break;
      }

      // optional double contact_surface_layer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contact_surface_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contact_surface_layer_)));
          set_has_contact_surface_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_gravity;
        break;
      }

      // optional .gazebo.msgs.Vector3d gravity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gravity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_update_rate;
        break;
      }

      // optional double update_rate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_update_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &update_rate_)));
          set_has_update_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_enable_physics;
        break;
      }

      // optional bool enable_physics = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_physics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_physics_)));
          set_has_enable_physics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_real_time_factor;
        break;
      }

      // optional double real_time_factor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_time_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_factor_)));
          set_has_real_time_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_real_time_update_rate;
        break;
      }

      // optional double real_time_update_rate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_time_update_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_time_update_rate_)));
          set_has_real_time_update_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_max_step_size;
        break;
      }

      // optional double max_step_size = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_step_size_)));
          set_has_max_step_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Physics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gazebo.msgs.Physics.Type type = 2 [default = ODE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string solver_type = 3;
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solver_type().data(), this->solver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->solver_type(), output);
  }

  // optional double dt = 4;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dt(), output);
  }

  // optional double min_step_size = 5;
  if (has_min_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_step_size(), output);
  }

  // optional int32 precon_iters = 6;
  if (has_precon_iters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->precon_iters(), output);
  }

  // optional int32 iters = 7;
  if (has_iters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iters(), output);
  }

  // optional double sor = 8;
  if (has_sor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->sor(), output);
  }

  // optional double cfm = 9;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cfm(), output);
  }

  // optional double erp = 10;
  if (has_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->erp(), output);
  }

  // optional double contact_max_correcting_vel = 11;
  if (has_contact_max_correcting_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->contact_max_correcting_vel(), output);
  }

  // optional double contact_surface_layer = 12;
  if (has_contact_surface_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->contact_surface_layer(), output);
  }

  // optional .gazebo.msgs.Vector3d gravity = 13;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gravity(), output);
  }

  // optional double update_rate = 14;
  if (has_update_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->update_rate(), output);
  }

  // optional bool enable_physics = 15;
  if (has_enable_physics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_physics(), output);
  }

  // optional double real_time_factor = 16;
  if (has_real_time_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->real_time_factor(), output);
  }

  // optional double real_time_update_rate = 17;
  if (has_real_time_update_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->real_time_update_rate(), output);
  }

  // optional double max_step_size = 18;
  if (has_max_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->max_step_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Physics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gazebo.msgs.Physics.Type type = 2 [default = ODE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string solver_type = 3;
  if (has_solver_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solver_type().data(), this->solver_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->solver_type(), target);
  }

  // optional double dt = 4;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dt(), target);
  }

  // optional double min_step_size = 5;
  if (has_min_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_step_size(), target);
  }

  // optional int32 precon_iters = 6;
  if (has_precon_iters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->precon_iters(), target);
  }

  // optional int32 iters = 7;
  if (has_iters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iters(), target);
  }

  // optional double sor = 8;
  if (has_sor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->sor(), target);
  }

  // optional double cfm = 9;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cfm(), target);
  }

  // optional double erp = 10;
  if (has_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->erp(), target);
  }

  // optional double contact_max_correcting_vel = 11;
  if (has_contact_max_correcting_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->contact_max_correcting_vel(), target);
  }

  // optional double contact_surface_layer = 12;
  if (has_contact_surface_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->contact_surface_layer(), target);
  }

  // optional .gazebo.msgs.Vector3d gravity = 13;
  if (has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gravity(), target);
  }

  // optional double update_rate = 14;
  if (has_update_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->update_rate(), target);
  }

  // optional bool enable_physics = 15;
  if (has_enable_physics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_physics(), target);
  }

  // optional double real_time_factor = 16;
  if (has_real_time_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->real_time_factor(), target);
  }

  // optional double real_time_update_rate = 17;
  if (has_real_time_update_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->real_time_update_rate(), target);
  }

  // optional double max_step_size = 18;
  if (has_max_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->max_step_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Physics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Physics.Type type = 2 [default = ODE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string solver_type = 3;
    if (has_solver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solver_type());
    }

    // optional double dt = 4;
    if (has_dt()) {
      total_size += 1 + 8;
    }

    // optional double min_step_size = 5;
    if (has_min_step_size()) {
      total_size += 1 + 8;
    }

    // optional int32 precon_iters = 6;
    if (has_precon_iters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precon_iters());
    }

    // optional int32 iters = 7;
    if (has_iters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iters());
    }

    // optional double sor = 8;
    if (has_sor()) {
      total_size += 1 + 8;
    }

    // optional double cfm = 9;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double erp = 10;
    if (has_erp()) {
      total_size += 1 + 8;
    }

    // optional double contact_max_correcting_vel = 11;
    if (has_contact_max_correcting_vel()) {
      total_size += 1 + 8;
    }

    // optional double contact_surface_layer = 12;
    if (has_contact_surface_layer()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.Vector3d gravity = 13;
    if (has_gravity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gravity());
    }

    // optional double update_rate = 14;
    if (has_update_rate()) {
      total_size += 1 + 8;
    }

    // optional bool enable_physics = 15;
    if (has_enable_physics()) {
      total_size += 1 + 1;
    }

    // optional double real_time_factor = 16;
    if (has_real_time_factor()) {
      total_size += 2 + 8;
    }

    // optional double real_time_update_rate = 17;
    if (has_real_time_update_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double max_step_size = 18;
    if (has_max_step_size()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Physics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Physics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Physics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Physics::MergeFrom(const Physics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_solver_type()) {
      set_solver_type(from.solver_type());
    }
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_min_step_size()) {
      set_min_step_size(from.min_step_size());
    }
    if (from.has_precon_iters()) {
      set_precon_iters(from.precon_iters());
    }
    if (from.has_iters()) {
      set_iters(from.iters());
    }
    if (from.has_sor()) {
      set_sor(from.sor());
    }
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_erp()) {
      set_erp(from.erp());
    }
    if (from.has_contact_max_correcting_vel()) {
      set_contact_max_correcting_vel(from.contact_max_correcting_vel());
    }
    if (from.has_contact_surface_layer()) {
      set_contact_surface_layer(from.contact_surface_layer());
    }
    if (from.has_gravity()) {
      mutable_gravity()->::gazebo::msgs::Vector3d::MergeFrom(from.gravity());
    }
    if (from.has_update_rate()) {
      set_update_rate(from.update_rate());
    }
    if (from.has_enable_physics()) {
      set_enable_physics(from.enable_physics());
    }
    if (from.has_real_time_factor()) {
      set_real_time_factor(from.real_time_factor());
    }
    if (from.has_real_time_update_rate()) {
      set_real_time_update_rate(from.real_time_update_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_step_size()) {
      set_max_step_size(from.max_step_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Physics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Physics::CopyFrom(const Physics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Physics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gravity()) {
    if (!this->gravity().IsInitialized()) return false;
  }
  return true;
}

void Physics::Swap(Physics* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(solver_type_, other->solver_type_);
    std::swap(dt_, other->dt_);
    std::swap(min_step_size_, other->min_step_size_);
    std::swap(precon_iters_, other->precon_iters_);
    std::swap(iters_, other->iters_);
    std::swap(sor_, other->sor_);
    std::swap(cfm_, other->cfm_);
    std::swap(erp_, other->erp_);
    std::swap(contact_max_correcting_vel_, other->contact_max_correcting_vel_);
    std::swap(contact_surface_layer_, other->contact_surface_layer_);
    std::swap(gravity_, other->gravity_);
    std::swap(update_rate_, other->update_rate_);
    std::swap(enable_physics_, other->enable_physics_);
    std::swap(real_time_factor_, other->real_time_factor_);
    std::swap(real_time_update_rate_, other->real_time_update_rate_);
    std::swap(max_step_size_, other->max_step_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Physics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Physics_descriptor_;
  metadata.reflection = Physics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Physics", Physics)
// @@protoc_insertion_point(global_scope)
