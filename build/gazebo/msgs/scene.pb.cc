// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_scene_2eproto() {
  protobuf_AddDesc_scene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scene.proto");
  GOOGLE_CHECK(file != NULL);
  Scene_descriptor_ = file->message_type(0);
  static const int Scene_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, ambient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, sky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, shadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, fog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, joint_),
  };
  Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scene));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scene_descriptor_, &Scene::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scene_2eproto() {
  delete Scene::default_instance_;
  delete Scene_reflection_;
}

void protobuf_AddDesc_scene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_header_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_color_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_fog_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_sky_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_shadows_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_visual_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_light_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_joint_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_model_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013scene.proto\022\013gazebo.msgs\032\014header.proto"
    "\032\013color.proto\032\tfog.proto\032\tsky.proto\032\rsha"
    "dows.proto\032\014visual.proto\032\npose.proto\032\013li"
    "ght.proto\032\013joint.proto\032\013model.proto\"\256\002\n\005"
    "Scene\022\014\n\004name\030\001 \002(\t\022#\n\007ambient\030\002 \001(\0132\022.g"
    "azebo.msgs.Color\022&\n\nbackground\030\003 \001(\0132\022.g"
    "azebo.msgs.Color\022\035\n\003sky\030\004 \001(\0132\020.gazebo.m"
    "sgs.Sky\022\025\n\007shadows\030\005 \001(\010:\004true\022\035\n\003fog\030\006 "
    "\001(\0132\020.gazebo.msgs.Fog\022\014\n\004grid\030\007 \001(\010\022!\n\005m"
    "odel\030\010 \003(\0132\022.gazebo.msgs.Model\022!\n\005light\030"
    "\t \003(\0132\022.gazebo.msgs.Light\022!\n\005joint\030\n \003(\013"
    "2\022.gazebo.msgs.Joint", 460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scene.proto", &protobuf_RegisterTypes);
  Scene::default_instance_ = new Scene();
  Scene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scene_2eproto {
  StaticDescriptorInitializer_scene_2eproto() {
    protobuf_AddDesc_scene_2eproto();
  }
} static_descriptor_initializer_scene_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Scene::kNameFieldNumber;
const int Scene::kAmbientFieldNumber;
const int Scene::kBackgroundFieldNumber;
const int Scene::kSkyFieldNumber;
const int Scene::kShadowsFieldNumber;
const int Scene::kFogFieldNumber;
const int Scene::kGridFieldNumber;
const int Scene::kModelFieldNumber;
const int Scene::kLightFieldNumber;
const int Scene::kJointFieldNumber;
#endif  // !_MSC_VER

Scene::Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scene::InitAsDefaultInstance() {
  ambient_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
  background_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
  sky_ = const_cast< ::gazebo::msgs::Sky*>(&::gazebo::msgs::Sky::default_instance());
  fog_ = const_cast< ::gazebo::msgs::Fog*>(&::gazebo::msgs::Fog::default_instance());
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ambient_ = NULL;
  background_ = NULL;
  sky_ = NULL;
  shadows_ = true;
  fog_ = NULL;
  grid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scene::~Scene() {
  SharedDtor();
}

void Scene::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete ambient_;
    delete background_;
    delete sky_;
    delete fog_;
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New() const {
  return new Scene;
}

void Scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ambient()) {
      if (ambient_ != NULL) ambient_->::gazebo::msgs::Color::Clear();
    }
    if (has_background()) {
      if (background_ != NULL) background_->::gazebo::msgs::Color::Clear();
    }
    if (has_sky()) {
      if (sky_ != NULL) sky_->::gazebo::msgs::Sky::Clear();
    }
    shadows_ = true;
    if (has_fog()) {
      if (fog_ != NULL) fog_->::gazebo::msgs::Fog::Clear();
    }
    grid_ = false;
  }
  model_.Clear();
  light_.Clear();
  joint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ambient;
        break;
      }

      // optional .gazebo.msgs.Color ambient = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ambient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_background;
        break;
      }

      // optional .gazebo.msgs.Color background = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sky;
        break;
      }

      // optional .gazebo.msgs.Sky sky = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sky:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sky()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shadows;
        break;
      }

      // optional bool shadows = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadows_)));
          set_has_shadows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fog;
        break;
      }

      // optional .gazebo.msgs.Fog fog = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_grid;
        break;
      }

      // optional bool grid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &grid_)));
          set_has_grid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_model;
        break;
      }

      // repeated .gazebo.msgs.Model model = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_model;
        if (input->ExpectTag(74)) goto parse_light;
        break;
      }

      // repeated .gazebo.msgs.Light light = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_light()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_light;
        if (input->ExpectTag(82)) goto parse_joint;
        break;
      }

      // repeated .gazebo.msgs.Joint joint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_joint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .gazebo.msgs.Color ambient = 2;
  if (has_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ambient(), output);
  }

  // optional .gazebo.msgs.Color background = 3;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->background(), output);
  }

  // optional .gazebo.msgs.Sky sky = 4;
  if (has_sky()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sky(), output);
  }

  // optional bool shadows = 5 [default = true];
  if (has_shadows()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shadows(), output);
  }

  // optional .gazebo.msgs.Fog fog = 6;
  if (has_fog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fog(), output);
  }

  // optional bool grid = 7;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->grid(), output);
  }

  // repeated .gazebo.msgs.Model model = 8;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->model(i), output);
  }

  // repeated .gazebo.msgs.Light light = 9;
  for (int i = 0; i < this->light_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->light(i), output);
  }

  // repeated .gazebo.msgs.Joint joint = 10;
  for (int i = 0; i < this->joint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->joint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .gazebo.msgs.Color ambient = 2;
  if (has_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ambient(), target);
  }

  // optional .gazebo.msgs.Color background = 3;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->background(), target);
  }

  // optional .gazebo.msgs.Sky sky = 4;
  if (has_sky()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sky(), target);
  }

  // optional bool shadows = 5 [default = true];
  if (has_shadows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shadows(), target);
  }

  // optional .gazebo.msgs.Fog fog = 6;
  if (has_fog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fog(), target);
  }

  // optional bool grid = 7;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->grid(), target);
  }

  // repeated .gazebo.msgs.Model model = 8;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->model(i), target);
  }

  // repeated .gazebo.msgs.Light light = 9;
  for (int i = 0; i < this->light_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->light(i), target);
  }

  // repeated .gazebo.msgs.Joint joint = 10;
  for (int i = 0; i < this->joint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->joint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .gazebo.msgs.Color ambient = 2;
    if (has_ambient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ambient());
    }

    // optional .gazebo.msgs.Color background = 3;
    if (has_background()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->background());
    }

    // optional .gazebo.msgs.Sky sky = 4;
    if (has_sky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sky());
    }

    // optional bool shadows = 5 [default = true];
    if (has_shadows()) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.Fog fog = 6;
    if (has_fog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fog());
    }

    // optional bool grid = 7;
    if (has_grid()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gazebo.msgs.Model model = 8;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  // repeated .gazebo.msgs.Light light = 9;
  total_size += 1 * this->light_size();
  for (int i = 0; i < this->light_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->light(i));
  }

  // repeated .gazebo.msgs.Joint joint = 10;
  total_size += 1 * this->joint_size();
  for (int i = 0; i < this->joint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  light_.MergeFrom(from.light_);
  joint_.MergeFrom(from.joint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ambient()) {
      mutable_ambient()->::gazebo::msgs::Color::MergeFrom(from.ambient());
    }
    if (from.has_background()) {
      mutable_background()->::gazebo::msgs::Color::MergeFrom(from.background());
    }
    if (from.has_sky()) {
      mutable_sky()->::gazebo::msgs::Sky::MergeFrom(from.sky());
    }
    if (from.has_shadows()) {
      set_shadows(from.shadows());
    }
    if (from.has_fog()) {
      mutable_fog()->::gazebo::msgs::Fog::MergeFrom(from.fog());
    }
    if (from.has_grid()) {
      set_grid(from.grid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ambient()) {
    if (!this->ambient().IsInitialized()) return false;
  }
  if (has_background()) {
    if (!this->background().IsInitialized()) return false;
  }
  if (has_sky()) {
    if (!this->sky().IsInitialized()) return false;
  }
  if (has_fog()) {
    if (!this->fog().IsInitialized()) return false;
  }
  for (int i = 0; i < model_size(); i++) {
    if (!this->model(i).IsInitialized()) return false;
  }
  for (int i = 0; i < light_size(); i++) {
    if (!this->light(i).IsInitialized()) return false;
  }
  for (int i = 0; i < joint_size(); i++) {
    if (!this->joint(i).IsInitialized()) return false;
  }
  return true;
}

void Scene::Swap(Scene* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ambient_, other->ambient_);
    std::swap(background_, other->background_);
    std::swap(sky_, other->sky_);
    std::swap(shadows_, other->shadows_);
    std::swap(fog_, other->fog_);
    std::swap(grid_, other->grid_);
    model_.Swap(&other->model_);
    light_.Swap(&other->light_);
    joint_.Swap(&other->joint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Scene", Scene)
// @@protoc_insertion_point(global_scope)
