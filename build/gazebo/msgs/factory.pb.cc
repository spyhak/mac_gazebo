// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "factory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Factory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Factory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_factory_2eproto() {
  protobuf_AddDesc_factory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "factory.proto");
  GOOGLE_CHECK(file != NULL);
  Factory_descriptor_ = file->message_type(0);
  static const int Factory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, sdf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, sdf_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, edit_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, clone_model_name_),
  };
  Factory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Factory_descriptor_,
      Factory::default_instance_,
      Factory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Factory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_factory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Factory_descriptor_, &Factory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_factory_2eproto() {
  delete Factory::default_instance_;
  delete Factory_reflection_;
}

void protobuf_AddDesc_factory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_header_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfactory.proto\022\013gazebo.msgs\032\014header.pro"
    "to\032\npose.proto\"z\n\007Factory\022\013\n\003sdf\030\001 \001(\t\022\024"
    "\n\014sdf_filename\030\002 \001(\t\022\037\n\004pose\030\003 \001(\0132\021.gaz"
    "ebo.msgs.Pose\022\021\n\tedit_name\030\004 \001(\t\022\030\n\020clon"
    "e_model_name\030\005 \001(\t", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "factory.proto", &protobuf_RegisterTypes);
  Factory::default_instance_ = new Factory();
  Factory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_factory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_factory_2eproto {
  StaticDescriptorInitializer_factory_2eproto() {
    protobuf_AddDesc_factory_2eproto();
  }
} static_descriptor_initializer_factory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Factory::kSdfFieldNumber;
const int Factory::kSdfFilenameFieldNumber;
const int Factory::kPoseFieldNumber;
const int Factory::kEditNameFieldNumber;
const int Factory::kCloneModelNameFieldNumber;
#endif  // !_MSC_VER

Factory::Factory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Factory::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

Factory::Factory(const Factory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Factory::SharedCtor() {
  _cached_size_ = 0;
  sdf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdf_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pose_ = NULL;
  edit_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clone_model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Factory::~Factory() {
  SharedDtor();
}

void Factory::SharedDtor() {
  if (sdf_ != &::google::protobuf::internal::kEmptyString) {
    delete sdf_;
  }
  if (sdf_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete sdf_filename_;
  }
  if (edit_name_ != &::google::protobuf::internal::kEmptyString) {
    delete edit_name_;
  }
  if (clone_model_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clone_model_name_;
  }
  if (this != default_instance_) {
    delete pose_;
  }
}

void Factory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Factory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Factory_descriptor_;
}

const Factory& Factory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factory_2eproto();
  return *default_instance_;
}

Factory* Factory::default_instance_ = NULL;

Factory* Factory::New() const {
  return new Factory;
}

void Factory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sdf()) {
      if (sdf_ != &::google::protobuf::internal::kEmptyString) {
        sdf_->clear();
      }
    }
    if (has_sdf_filename()) {
      if (sdf_filename_ != &::google::protobuf::internal::kEmptyString) {
        sdf_filename_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
    if (has_edit_name()) {
      if (edit_name_ != &::google::protobuf::internal::kEmptyString) {
        edit_name_->clear();
      }
    }
    if (has_clone_model_name()) {
      if (clone_model_name_ != &::google::protobuf::internal::kEmptyString) {
        clone_model_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Factory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sdf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdf().data(), this->sdf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sdf_filename;
        break;
      }

      // optional string sdf_filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdf_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdf_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdf_filename().data(), this->sdf_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_edit_name;
        break;
      }

      // optional string edit_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edit_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->edit_name().data(), this->edit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clone_model_name;
        break;
      }

      // optional string clone_model_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clone_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clone_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clone_model_name().data(), this->clone_model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Factory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sdf = 1;
  if (has_sdf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdf().data(), this->sdf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sdf(), output);
  }

  // optional string sdf_filename = 2;
  if (has_sdf_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdf_filename().data(), this->sdf_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sdf_filename(), output);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }

  // optional string edit_name = 4;
  if (has_edit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edit_name().data(), this->edit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->edit_name(), output);
  }

  // optional string clone_model_name = 5;
  if (has_clone_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clone_model_name().data(), this->clone_model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->clone_model_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Factory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sdf = 1;
  if (has_sdf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdf().data(), this->sdf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sdf(), target);
  }

  // optional string sdf_filename = 2;
  if (has_sdf_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdf_filename().data(), this->sdf_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sdf_filename(), target);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }

  // optional string edit_name = 4;
  if (has_edit_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->edit_name().data(), this->edit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->edit_name(), target);
  }

  // optional string clone_model_name = 5;
  if (has_clone_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clone_model_name().data(), this->clone_model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clone_model_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Factory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sdf = 1;
    if (has_sdf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdf());
    }

    // optional string sdf_filename = 2;
    if (has_sdf_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdf_filename());
    }

    // optional .gazebo.msgs.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional string edit_name = 4;
    if (has_edit_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->edit_name());
    }

    // optional string clone_model_name = 5;
    if (has_clone_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clone_model_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Factory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Factory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Factory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Factory::MergeFrom(const Factory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sdf()) {
      set_sdf(from.sdf());
    }
    if (from.has_sdf_filename()) {
      set_sdf_filename(from.sdf_filename());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_edit_name()) {
      set_edit_name(from.edit_name());
    }
    if (from.has_clone_model_name()) {
      set_clone_model_name(from.clone_model_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Factory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Factory::CopyFrom(const Factory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Factory::IsInitialized() const {

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Factory::Swap(Factory* other) {
  if (other != this) {
    std::swap(sdf_, other->sdf_);
    std::swap(sdf_filename_, other->sdf_filename_);
    std::swap(pose_, other->pose_);
    std::swap(edit_name_, other->edit_name_);
    std::swap(clone_model_name_, other->clone_model_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Factory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Factory_descriptor_;
  metadata.reflection = Factory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Factory", Factory)
// @@protoc_insertion_point(global_scope)
