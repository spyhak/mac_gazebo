// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camerasensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "camerasensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CameraSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraSensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_camerasensor_2eproto() {
  protobuf_AddDesc_camerasensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "camerasensor.proto");
  GOOGLE_CHECK(file != NULL);
  CameraSensor_descriptor_ = file->message_type(0);
  static const int CameraSensor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, horizontal_fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, image_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, near_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, far_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, save_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, save_path_),
  };
  CameraSensor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraSensor_descriptor_,
      CameraSensor::default_instance_,
      CameraSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSensor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraSensor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_camerasensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraSensor_descriptor_, &CameraSensor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_camerasensor_2eproto() {
  delete CameraSensor::default_instance_;
  delete CameraSensor_reflection_;
}

void protobuf_AddDesc_camerasensor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022camerasensor.proto\022\013gazebo.msgs\032\016vecto"
    "r2d.proto\"\265\001\n\014CameraSensor\022\026\n\016horizontal"
    "_fov\030\001 \001(\001\022)\n\nimage_size\030\002 \001(\0132\025.gazebo."
    "msgs.Vector2d\022\024\n\014image_format\030\003 \001(\t\022\021\n\tn"
    "ear_clip\030\004 \001(\001\022\020\n\010far_clip\030\005 \001(\001\022\024\n\014save"
    "_enabled\030\006 \001(\010\022\021\n\tsave_path\030\007 \001(\t", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camerasensor.proto", &protobuf_RegisterTypes);
  CameraSensor::default_instance_ = new CameraSensor();
  CameraSensor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_camerasensor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_camerasensor_2eproto {
  StaticDescriptorInitializer_camerasensor_2eproto() {
    protobuf_AddDesc_camerasensor_2eproto();
  }
} static_descriptor_initializer_camerasensor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CameraSensor::kHorizontalFovFieldNumber;
const int CameraSensor::kImageSizeFieldNumber;
const int CameraSensor::kImageFormatFieldNumber;
const int CameraSensor::kNearClipFieldNumber;
const int CameraSensor::kFarClipFieldNumber;
const int CameraSensor::kSaveEnabledFieldNumber;
const int CameraSensor::kSavePathFieldNumber;
#endif  // !_MSC_VER

CameraSensor::CameraSensor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraSensor::InitAsDefaultInstance() {
  image_size_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
}

CameraSensor::CameraSensor(const CameraSensor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraSensor::SharedCtor() {
  _cached_size_ = 0;
  horizontal_fov_ = 0;
  image_size_ = NULL;
  image_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  near_clip_ = 0;
  far_clip_ = 0;
  save_enabled_ = false;
  save_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSensor::~CameraSensor() {
  SharedDtor();
}

void CameraSensor::SharedDtor() {
  if (image_format_ != &::google::protobuf::internal::kEmptyString) {
    delete image_format_;
  }
  if (save_path_ != &::google::protobuf::internal::kEmptyString) {
    delete save_path_;
  }
  if (this != default_instance_) {
    delete image_size_;
  }
}

void CameraSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraSensor_descriptor_;
}

const CameraSensor& CameraSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camerasensor_2eproto();
  return *default_instance_;
}

CameraSensor* CameraSensor::default_instance_ = NULL;

CameraSensor* CameraSensor::New() const {
  return new CameraSensor;
}

void CameraSensor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    horizontal_fov_ = 0;
    if (has_image_size()) {
      if (image_size_ != NULL) image_size_->::gazebo::msgs::Vector2d::Clear();
    }
    if (has_image_format()) {
      if (image_format_ != &::google::protobuf::internal::kEmptyString) {
        image_format_->clear();
      }
    }
    near_clip_ = 0;
    far_clip_ = 0;
    save_enabled_ = false;
    if (has_save_path()) {
      if (save_path_ != &::google::protobuf::internal::kEmptyString) {
        save_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double horizontal_fov = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_fov_)));
          set_has_horizontal_fov();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_size;
        break;
      }

      // optional .gazebo.msgs.Vector2d image_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image_format;
        break;
      }

      // optional string image_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_format().data(), this->image_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_near_clip;
        break;
      }

      // optional double near_clip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_near_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &near_clip_)));
          set_has_near_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_far_clip;
        break;
      }

      // optional double far_clip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_far_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &far_clip_)));
          set_has_far_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_save_enabled;
        break;
      }

      // optional bool save_enabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_enabled_)));
          set_has_save_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_save_path;
        break;
      }

      // optional string save_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->save_path().data(), this->save_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double horizontal_fov = 1;
  if (has_horizontal_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->horizontal_fov(), output);
  }

  // optional .gazebo.msgs.Vector2d image_size = 2;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image_size(), output);
  }

  // optional string image_format = 3;
  if (has_image_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_format().data(), this->image_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->image_format(), output);
  }

  // optional double near_clip = 4;
  if (has_near_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->near_clip(), output);
  }

  // optional double far_clip = 5;
  if (has_far_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->far_clip(), output);
  }

  // optional bool save_enabled = 6;
  if (has_save_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->save_enabled(), output);
  }

  // optional string save_path = 7;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->save_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraSensor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double horizontal_fov = 1;
  if (has_horizontal_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal_fov(), target);
  }

  // optional .gazebo.msgs.Vector2d image_size = 2;
  if (has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image_size(), target);
  }

  // optional string image_format = 3;
  if (has_image_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_format().data(), this->image_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_format(), target);
  }

  // optional double near_clip = 4;
  if (has_near_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->near_clip(), target);
  }

  // optional double far_clip = 5;
  if (has_far_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->far_clip(), target);
  }

  // optional bool save_enabled = 6;
  if (has_save_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->save_enabled(), target);
  }

  // optional string save_path = 7;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->save_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraSensor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double horizontal_fov = 1;
    if (has_horizontal_fov()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.Vector2d image_size = 2;
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_size());
    }

    // optional string image_format = 3;
    if (has_image_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_format());
    }

    // optional double near_clip = 4;
    if (has_near_clip()) {
      total_size += 1 + 8;
    }

    // optional double far_clip = 5;
    if (has_far_clip()) {
      total_size += 1 + 8;
    }

    // optional bool save_enabled = 6;
    if (has_save_enabled()) {
      total_size += 1 + 1;
    }

    // optional string save_path = 7;
    if (has_save_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSensor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraSensor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraSensor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraSensor::MergeFrom(const CameraSensor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontal_fov()) {
      set_horizontal_fov(from.horizontal_fov());
    }
    if (from.has_image_size()) {
      mutable_image_size()->::gazebo::msgs::Vector2d::MergeFrom(from.image_size());
    }
    if (from.has_image_format()) {
      set_image_format(from.image_format());
    }
    if (from.has_near_clip()) {
      set_near_clip(from.near_clip());
    }
    if (from.has_far_clip()) {
      set_far_clip(from.far_clip());
    }
    if (from.has_save_enabled()) {
      set_save_enabled(from.save_enabled());
    }
    if (from.has_save_path()) {
      set_save_path(from.save_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraSensor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensor::CopyFrom(const CameraSensor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensor::IsInitialized() const {

  if (has_image_size()) {
    if (!this->image_size().IsInitialized()) return false;
  }
  return true;
}

void CameraSensor::Swap(CameraSensor* other) {
  if (other != this) {
    std::swap(horizontal_fov_, other->horizontal_fov_);
    std::swap(image_size_, other->image_size_);
    std::swap(image_format_, other->image_format_);
    std::swap(near_clip_, other->near_clip_);
    std::swap(far_clip_, other->far_clip_);
    std::swap(save_enabled_, other->save_enabled_);
    std::swap(save_path_, other->save_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraSensor_descriptor_;
  metadata.reflection = CameraSensor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.CameraSensor", CameraSensor)
// @@protoc_insertion_point(global_scope)
