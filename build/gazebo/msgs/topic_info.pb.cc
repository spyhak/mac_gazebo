// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topic_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "topic_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* TopicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_topic_5finfo_2eproto() {
  protobuf_AddDesc_topic_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "topic_info.proto");
  GOOGLE_CHECK(file != NULL);
  TopicInfo_descriptor_ = file->message_type(0);
  static const int TopicInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, subscriber_),
  };
  TopicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicInfo_descriptor_,
      TopicInfo::default_instance_,
      TopicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_topic_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicInfo_descriptor_, &TopicInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_topic_5finfo_2eproto() {
  delete TopicInfo::default_instance_;
  delete TopicInfo_reflection_;
}

void protobuf_AddDesc_topic_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_publish_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_subscribe_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020topic_info.proto\022\013gazebo.msgs\032\rpublish"
    ".proto\032\017subscribe.proto\"r\n\tTopicInfo\022\020\n\010"
    "msg_type\030\001 \002(\t\022\'\n\tpublisher\030\002 \003(\0132\024.gaze"
    "bo.msgs.Publish\022*\n\nsubscriber\030\003 \003(\0132\026.ga"
    "zebo.msgs.Subscribe", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topic_info.proto", &protobuf_RegisterTypes);
  TopicInfo::default_instance_ = new TopicInfo();
  TopicInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_topic_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_topic_5finfo_2eproto {
  StaticDescriptorInitializer_topic_5finfo_2eproto() {
    protobuf_AddDesc_topic_5finfo_2eproto();
  }
} static_descriptor_initializer_topic_5finfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TopicInfo::kMsgTypeFieldNumber;
const int TopicInfo::kPublisherFieldNumber;
const int TopicInfo::kSubscriberFieldNumber;
#endif  // !_MSC_VER

TopicInfo::TopicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicInfo::InitAsDefaultInstance() {
}

TopicInfo::TopicInfo(const TopicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicInfo::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicInfo::~TopicInfo() {
  SharedDtor();
}

void TopicInfo::SharedDtor() {
  if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_type_;
  }
  if (this != default_instance_) {
  }
}

void TopicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicInfo_descriptor_;
}

const TopicInfo& TopicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_topic_5finfo_2eproto();
  return *default_instance_;
}

TopicInfo* TopicInfo::default_instance_ = NULL;

TopicInfo* TopicInfo::New() const {
  return new TopicInfo;
}

void TopicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_type()) {
      if (msg_type_ != &::google::protobuf::internal::kEmptyString) {
        msg_type_->clear();
      }
    }
  }
  publisher_.Clear();
  subscriber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_type().data(), this->msg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }

      // repeated .gazebo.msgs.Publish publisher = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publisher()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        if (input->ExpectTag(26)) goto parse_subscriber;
        break;
      }

      // repeated .gazebo.msgs.Subscribe subscriber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subscriber;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg_type(), output);
  }

  // repeated .gazebo.msgs.Publish publisher = 2;
  for (int i = 0; i < this->publisher_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->publisher(i), output);
  }

  // repeated .gazebo.msgs.Subscribe subscriber = 3;
  for (int i = 0; i < this->subscriber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subscriber(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_type().data(), this->msg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_type(), target);
  }

  // repeated .gazebo.msgs.Publish publisher = 2;
  for (int i = 0; i < this->publisher_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->publisher(i), target);
  }

  // repeated .gazebo.msgs.Subscribe subscriber = 3;
  for (int i = 0; i < this->subscriber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subscriber(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_type());
    }

  }
  // repeated .gazebo.msgs.Publish publisher = 2;
  total_size += 1 * this->publisher_size();
  for (int i = 0; i < this->publisher_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->publisher(i));
  }

  // repeated .gazebo.msgs.Subscribe subscriber = 3;
  total_size += 1 * this->subscriber_size();
  for (int i = 0; i < this->subscriber_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriber(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicInfo::MergeFrom(const TopicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  publisher_.MergeFrom(from.publisher_);
  subscriber_.MergeFrom(from.subscriber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicInfo::CopyFrom(const TopicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < publisher_size(); i++) {
    if (!this->publisher(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subscriber_size(); i++) {
    if (!this->subscriber(i).IsInitialized()) return false;
  }
  return true;
}

void TopicInfo::Swap(TopicInfo* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    publisher_.Swap(&other->publisher_);
    subscriber_.Swap(&other->subscriber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicInfo_descriptor_;
  metadata.reflection = TopicInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.TopicInfo", TopicInfo)
// @@protoc_insertion_point(global_scope)
