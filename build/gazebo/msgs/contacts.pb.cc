// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "contacts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Contacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contacts_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_contacts_2eproto() {
  protobuf_AddDesc_contacts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "contacts.proto");
  GOOGLE_CHECK(file != NULL);
  Contacts_descriptor_ = file->message_type(0);
  static const int Contacts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, time_),
  };
  Contacts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contacts_descriptor_,
      Contacts::default_instance_,
      Contacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contacts));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_contacts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contacts_descriptor_, &Contacts::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_contacts_2eproto() {
  delete Contacts::default_instance_;
  delete Contacts_reflection_;
}

void protobuf_AddDesc_contacts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_contact_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016contacts.proto\022\013gazebo.msgs\032\rcontact.p"
    "roto\032\ntime.proto\"R\n\010Contacts\022%\n\007contact\030"
    "\001 \003(\0132\024.gazebo.msgs.Contact\022\037\n\004time\030\002 \002("
    "\0132\021.gazebo.msgs.Time", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contacts.proto", &protobuf_RegisterTypes);
  Contacts::default_instance_ = new Contacts();
  Contacts::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contacts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contacts_2eproto {
  StaticDescriptorInitializer_contacts_2eproto() {
    protobuf_AddDesc_contacts_2eproto();
  }
} static_descriptor_initializer_contacts_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Contacts::kContactFieldNumber;
const int Contacts::kTimeFieldNumber;
#endif  // !_MSC_VER

Contacts::Contacts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Contacts::InitAsDefaultInstance() {
  time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

Contacts::Contacts(const Contacts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Contacts::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contacts::~Contacts() {
  SharedDtor();
}

void Contacts::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void Contacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contacts_descriptor_;
}

const Contacts& Contacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contacts_2eproto();
  return *default_instance_;
}

Contacts* Contacts::default_instance_ = NULL;

Contacts* Contacts::New() const {
  return new Contacts;
}

void Contacts::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_time()) {
      if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
    }
  }
  contact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gazebo.msgs.Contact contact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_contact;
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // required .gazebo.msgs.Time time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gazebo.msgs.Contact contact = 1;
  for (int i = 0; i < this->contact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contact(i), output);
  }

  // required .gazebo.msgs.Time time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Contacts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gazebo.msgs.Contact contact = 1;
  for (int i = 0; i < this->contact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contact(i), target);
  }

  // required .gazebo.msgs.Time time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Contacts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .gazebo.msgs.Time time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

  }
  // repeated .gazebo.msgs.Contact contact = 1;
  total_size += 1 * this->contact_size();
  for (int i = 0; i < this->contact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contacts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contacts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contacts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contacts::MergeFrom(const Contacts& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_.MergeFrom(from.contact_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      mutable_time()->::gazebo::msgs::Time::MergeFrom(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contacts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contacts::CopyFrom(const Contacts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contacts::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < contact_size(); i++) {
    if (!this->contact(i).IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void Contacts::Swap(Contacts* other) {
  if (other != this) {
    contact_.Swap(&other->contact_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contacts_descriptor_;
  metadata.reflection = Contacts_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Contacts", Contacts)
// @@protoc_insertion_point(global_scope)
