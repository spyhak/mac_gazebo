// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "contact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Contact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contact_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_contact_2eproto() {
  protobuf_AddDesc_contact_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "contact.proto");
  GOOGLE_CHECK(file != NULL);
  Contact_descriptor_ = file->message_type(0);
  static const int Contact_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, collision1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, collision2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, wrench_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, world_),
  };
  Contact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contact_descriptor_,
      Contact::default_instance_,
      Contact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contact));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_contact_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contact_descriptor_, &Contact::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_contact_2eproto() {
  delete Contact::default_instance_;
  delete Contact_reflection_;
}

void protobuf_AddDesc_contact_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_joint_5fwrench_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcontact.proto\022\013gazebo.msgs\032\016vector3d.p"
    "roto\032\ntime.proto\032\022joint_wrench.proto\"\352\001\n"
    "\007Contact\022\022\n\ncollision1\030\001 \002(\t\022\022\n\ncollisio"
    "n2\030\002 \002(\t\022\'\n\010position\030\003 \003(\0132\025.gazebo.msgs"
    ".Vector3d\022%\n\006normal\030\004 \003(\0132\025.gazebo.msgs."
    "Vector3d\022\r\n\005depth\030\005 \003(\001\022(\n\006wrench\030\006 \003(\0132"
    "\030.gazebo.msgs.JointWrench\022\037\n\004time\030\007 \002(\0132"
    "\021.gazebo.msgs.Time\022\r\n\005world\030\010 \002(\t", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contact.proto", &protobuf_RegisterTypes);
  Contact::default_instance_ = new Contact();
  Contact::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contact_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contact_2eproto {
  StaticDescriptorInitializer_contact_2eproto() {
    protobuf_AddDesc_contact_2eproto();
  }
} static_descriptor_initializer_contact_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Contact::kCollision1FieldNumber;
const int Contact::kCollision2FieldNumber;
const int Contact::kPositionFieldNumber;
const int Contact::kNormalFieldNumber;
const int Contact::kDepthFieldNumber;
const int Contact::kWrenchFieldNumber;
const int Contact::kTimeFieldNumber;
const int Contact::kWorldFieldNumber;
#endif  // !_MSC_VER

Contact::Contact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Contact::InitAsDefaultInstance() {
  time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

Contact::Contact(const Contact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Contact::SharedCtor() {
  _cached_size_ = 0;
  collision1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collision2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = NULL;
  world_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contact::~Contact() {
  SharedDtor();
}

void Contact::SharedDtor() {
  if (collision1_ != &::google::protobuf::internal::kEmptyString) {
    delete collision1_;
  }
  if (collision2_ != &::google::protobuf::internal::kEmptyString) {
    delete collision2_;
  }
  if (world_ != &::google::protobuf::internal::kEmptyString) {
    delete world_;
  }
  if (this != default_instance_) {
    delete time_;
  }
}

void Contact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contact_descriptor_;
}

const Contact& Contact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contact_2eproto();
  return *default_instance_;
}

Contact* Contact::default_instance_ = NULL;

Contact* Contact::New() const {
  return new Contact;
}

void Contact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collision1()) {
      if (collision1_ != &::google::protobuf::internal::kEmptyString) {
        collision1_->clear();
      }
    }
    if (has_collision2()) {
      if (collision2_ != &::google::protobuf::internal::kEmptyString) {
        collision2_->clear();
      }
    }
    if (has_time()) {
      if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
    }
    if (has_world()) {
      if (world_ != &::google::protobuf::internal::kEmptyString) {
        world_->clear();
      }
    }
  }
  position_.Clear();
  normal_.Clear();
  depth_.Clear();
  wrench_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collision1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collision1().data(), this->collision1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collision2;
        break;
      }

      // required string collision2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collision2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collision2().data(), this->collision2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // repeated .gazebo.msgs.Vector3d position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        if (input->ExpectTag(34)) goto parse_normal;
        break;
      }

      // repeated .gazebo.msgs.Vector3d normal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_normal;
        if (input->ExpectTag(41)) goto parse_depth;
        break;
      }

      // repeated double depth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_depth())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_depth())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_depth;
        if (input->ExpectTag(50)) goto parse_wrench;
        break;
      }

      // repeated .gazebo.msgs.JointWrench wrench = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wrench:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wrench()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_wrench;
        if (input->ExpectTag(58)) goto parse_time;
        break;
      }

      // required .gazebo.msgs.Time time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_world;
        break;
      }

      // required string world = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->world().data(), this->world().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string collision1 = 1;
  if (has_collision1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision1().data(), this->collision1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collision1(), output);
  }

  // required string collision2 = 2;
  if (has_collision2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision2().data(), this->collision2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->collision2(), output);
  }

  // repeated .gazebo.msgs.Vector3d position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(i), output);
  }

  // repeated .gazebo.msgs.Vector3d normal = 4;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normal(i), output);
  }

  // repeated double depth = 5;
  for (int i = 0; i < this->depth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->depth(i), output);
  }

  // repeated .gazebo.msgs.JointWrench wrench = 6;
  for (int i = 0; i < this->wrench_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wrench(i), output);
  }

  // required .gazebo.msgs.Time time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->time(), output);
  }

  // required string world = 8;
  if (has_world()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->world(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Contact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string collision1 = 1;
  if (has_collision1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision1().data(), this->collision1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collision1(), target);
  }

  // required string collision2 = 2;
  if (has_collision2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision2().data(), this->collision2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collision2(), target);
  }

  // repeated .gazebo.msgs.Vector3d position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(i), target);
  }

  // repeated .gazebo.msgs.Vector3d normal = 4;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->normal(i), target);
  }

  // repeated double depth = 5;
  for (int i = 0; i < this->depth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->depth(i), target);
  }

  // repeated .gazebo.msgs.JointWrench wrench = 6;
  for (int i = 0; i < this->wrench_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->wrench(i), target);
  }

  // required .gazebo.msgs.Time time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->time(), target);
  }

  // required string world = 8;
  if (has_world()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->world().data(), this->world().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->world(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Contact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string collision1 = 1;
    if (has_collision1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collision1());
    }

    // required string collision2 = 2;
    if (has_collision2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collision2());
    }

    // required .gazebo.msgs.Time time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required string world = 8;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->world());
    }

  }
  // repeated .gazebo.msgs.Vector3d position = 3;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }

  // repeated .gazebo.msgs.Vector3d normal = 4;
  total_size += 1 * this->normal_size();
  for (int i = 0; i < this->normal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal(i));
  }

  // repeated double depth = 5;
  {
    int data_size = 0;
    data_size = 8 * this->depth_size();
    total_size += 1 * this->depth_size() + data_size;
  }

  // repeated .gazebo.msgs.JointWrench wrench = 6;
  total_size += 1 * this->wrench_size();
  for (int i = 0; i < this->wrench_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wrench(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contact::MergeFrom(const Contact& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  normal_.MergeFrom(from.normal_);
  depth_.MergeFrom(from.depth_);
  wrench_.MergeFrom(from.wrench_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collision1()) {
      set_collision1(from.collision1());
    }
    if (from.has_collision2()) {
      set_collision2(from.collision2());
    }
    if (from.has_time()) {
      mutable_time()->::gazebo::msgs::Time::MergeFrom(from.time());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contact::CopyFrom(const Contact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;

  for (int i = 0; i < position_size(); i++) {
    if (!this->position(i).IsInitialized()) return false;
  }
  for (int i = 0; i < normal_size(); i++) {
    if (!this->normal(i).IsInitialized()) return false;
  }
  for (int i = 0; i < wrench_size(); i++) {
    if (!this->wrench(i).IsInitialized()) return false;
  }
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void Contact::Swap(Contact* other) {
  if (other != this) {
    std::swap(collision1_, other->collision1_);
    std::swap(collision2_, other->collision2_);
    position_.Swap(&other->position_);
    normal_.Swap(&other->normal_);
    depth_.Swap(&other->depth_);
    wrench_.Swap(&other->wrench_);
    std::swap(time_, other->time_);
    std::swap(world_, other->world_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contact_descriptor_;
  metadata.reflection = Contact_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Contact", Contact)
// @@protoc_insertion_point(global_scope)
