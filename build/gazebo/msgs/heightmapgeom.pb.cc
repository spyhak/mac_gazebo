// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heightmapgeom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "heightmapgeom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* HeightmapGeom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapGeom_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeightmapGeom_Texture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapGeom_Texture_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeightmapGeom_Blend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightmapGeom_Blend_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_heightmapgeom_2eproto() {
  protobuf_AddDesc_heightmapgeom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "heightmapgeom.proto");
  GOOGLE_CHECK(file != NULL);
  HeightmapGeom_descriptor_ = file->message_type(0);
  static const int HeightmapGeom_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, blend_),
  };
  HeightmapGeom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeightmapGeom_descriptor_,
      HeightmapGeom::default_instance_,
      HeightmapGeom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeightmapGeom));
  HeightmapGeom_Texture_descriptor_ = HeightmapGeom_descriptor_->nested_type(0);
  static const int HeightmapGeom_Texture_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, size_),
  };
  HeightmapGeom_Texture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeightmapGeom_Texture_descriptor_,
      HeightmapGeom_Texture::default_instance_,
      HeightmapGeom_Texture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Texture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeightmapGeom_Texture));
  HeightmapGeom_Blend_descriptor_ = HeightmapGeom_descriptor_->nested_type(1);
  static const int HeightmapGeom_Blend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, min_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, fade_dist_),
  };
  HeightmapGeom_Blend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeightmapGeom_Blend_descriptor_,
      HeightmapGeom_Blend::default_instance_,
      HeightmapGeom_Blend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightmapGeom_Blend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeightmapGeom_Blend));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_heightmapgeom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeightmapGeom_descriptor_, &HeightmapGeom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeightmapGeom_Texture_descriptor_, &HeightmapGeom_Texture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeightmapGeom_Blend_descriptor_, &HeightmapGeom_Blend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_heightmapgeom_2eproto() {
  delete HeightmapGeom::default_instance_;
  delete HeightmapGeom_reflection_;
  delete HeightmapGeom_Texture::default_instance_;
  delete HeightmapGeom_Texture_reflection_;
  delete HeightmapGeom_Blend::default_instance_;
  delete HeightmapGeom_Blend_reflection_;
}

void protobuf_AddDesc_heightmapgeom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_image_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023heightmapgeom.proto\022\013gazebo.msgs\032\013imag"
    "e.proto\032\016vector3d.proto\"\376\002\n\rHeightmapGeo"
    "m\022!\n\005image\030\001 \001(\0132\022.gazebo.msgs.Image\022#\n\004"
    "size\030\002 \002(\0132\025.gazebo.msgs.Vector3d\022%\n\006ori"
    "gin\030\003 \001(\0132\025.gazebo.msgs.Vector3d\022\017\n\007heig"
    "hts\030\004 \003(\002\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030\006 \001(\005"
    "\0223\n\007texture\030\007 \003(\0132\".gazebo.msgs.Heightma"
    "pGeom.Texture\022/\n\005blend\030\010 \003(\0132 .gazebo.ms"
    "gs.HeightmapGeom.Blend\0328\n\007Texture\022\017\n\007dif"
    "fuse\030\001 \002(\t\022\016\n\006normal\030\002 \002(\t\022\014\n\004size\030\003 \002(\001"
    "\032.\n\005Blend\022\022\n\nmin_height\030\001 \002(\001\022\021\n\tfade_di"
    "st\030\002 \002(\001", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "heightmapgeom.proto", &protobuf_RegisterTypes);
  HeightmapGeom::default_instance_ = new HeightmapGeom();
  HeightmapGeom_Texture::default_instance_ = new HeightmapGeom_Texture();
  HeightmapGeom_Blend::default_instance_ = new HeightmapGeom_Blend();
  HeightmapGeom::default_instance_->InitAsDefaultInstance();
  HeightmapGeom_Texture::default_instance_->InitAsDefaultInstance();
  HeightmapGeom_Blend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_heightmapgeom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_heightmapgeom_2eproto {
  StaticDescriptorInitializer_heightmapgeom_2eproto() {
    protobuf_AddDesc_heightmapgeom_2eproto();
  }
} static_descriptor_initializer_heightmapgeom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeightmapGeom_Texture::kDiffuseFieldNumber;
const int HeightmapGeom_Texture::kNormalFieldNumber;
const int HeightmapGeom_Texture::kSizeFieldNumber;
#endif  // !_MSC_VER

HeightmapGeom_Texture::HeightmapGeom_Texture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeightmapGeom_Texture::InitAsDefaultInstance() {
}

HeightmapGeom_Texture::HeightmapGeom_Texture(const HeightmapGeom_Texture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeightmapGeom_Texture::SharedCtor() {
  _cached_size_ = 0;
  diffuse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapGeom_Texture::~HeightmapGeom_Texture() {
  SharedDtor();
}

void HeightmapGeom_Texture::SharedDtor() {
  if (diffuse_ != &::google::protobuf::internal::kEmptyString) {
    delete diffuse_;
  }
  if (normal_ != &::google::protobuf::internal::kEmptyString) {
    delete normal_;
  }
  if (this != default_instance_) {
  }
}

void HeightmapGeom_Texture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapGeom_Texture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapGeom_Texture_descriptor_;
}

const HeightmapGeom_Texture& HeightmapGeom_Texture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heightmapgeom_2eproto();
  return *default_instance_;
}

HeightmapGeom_Texture* HeightmapGeom_Texture::default_instance_ = NULL;

HeightmapGeom_Texture* HeightmapGeom_Texture::New() const {
  return new HeightmapGeom_Texture;
}

void HeightmapGeom_Texture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_diffuse()) {
      if (diffuse_ != &::google::protobuf::internal::kEmptyString) {
        diffuse_->clear();
      }
    }
    if (has_normal()) {
      if (normal_ != &::google::protobuf::internal::kEmptyString) {
        normal_->clear();
      }
    }
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeightmapGeom_Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string diffuse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffuse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diffuse().data(), this->diffuse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal;
        break;
      }

      // required string normal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normal().data(), this->normal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_size;
        break;
      }

      // required double size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeightmapGeom_Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string diffuse = 1;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffuse().data(), this->diffuse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->diffuse(), output);
  }

  // required string normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal().data(), this->normal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->normal(), output);
  }

  // required double size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeightmapGeom_Texture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string diffuse = 1;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffuse().data(), this->diffuse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->diffuse(), target);
  }

  // required string normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal().data(), this->normal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normal(), target);
  }

  // required double size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeightmapGeom_Texture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string diffuse = 1;
    if (has_diffuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diffuse());
    }

    // required string normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal());
    }

    // required double size = 3;
    if (has_size()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapGeom_Texture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeightmapGeom_Texture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapGeom_Texture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapGeom_Texture::MergeFrom(const HeightmapGeom_Texture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diffuse()) {
      set_diffuse(from.diffuse());
    }
    if (from.has_normal()) {
      set_normal(from.normal());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeightmapGeom_Texture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Texture::CopyFrom(const HeightmapGeom_Texture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Texture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HeightmapGeom_Texture::Swap(HeightmapGeom_Texture* other) {
  if (other != this) {
    std::swap(diffuse_, other->diffuse_);
    std::swap(normal_, other->normal_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeightmapGeom_Texture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapGeom_Texture_descriptor_;
  metadata.reflection = HeightmapGeom_Texture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeightmapGeom_Blend::kMinHeightFieldNumber;
const int HeightmapGeom_Blend::kFadeDistFieldNumber;
#endif  // !_MSC_VER

HeightmapGeom_Blend::HeightmapGeom_Blend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeightmapGeom_Blend::InitAsDefaultInstance() {
}

HeightmapGeom_Blend::HeightmapGeom_Blend(const HeightmapGeom_Blend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeightmapGeom_Blend::SharedCtor() {
  _cached_size_ = 0;
  min_height_ = 0;
  fade_dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapGeom_Blend::~HeightmapGeom_Blend() {
  SharedDtor();
}

void HeightmapGeom_Blend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeightmapGeom_Blend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapGeom_Blend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapGeom_Blend_descriptor_;
}

const HeightmapGeom_Blend& HeightmapGeom_Blend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heightmapgeom_2eproto();
  return *default_instance_;
}

HeightmapGeom_Blend* HeightmapGeom_Blend::default_instance_ = NULL;

HeightmapGeom_Blend* HeightmapGeom_Blend::New() const {
  return new HeightmapGeom_Blend;
}

void HeightmapGeom_Blend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_height_ = 0;
    fade_dist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeightmapGeom_Blend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double min_height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_height_)));
          set_has_min_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_fade_dist;
        break;
      }

      // required double fade_dist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fade_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fade_dist_)));
          set_has_fade_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeightmapGeom_Blend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double min_height = 1;
  if (has_min_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_height(), output);
  }

  // required double fade_dist = 2;
  if (has_fade_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fade_dist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeightmapGeom_Blend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double min_height = 1;
  if (has_min_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_height(), target);
  }

  // required double fade_dist = 2;
  if (has_fade_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fade_dist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeightmapGeom_Blend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double min_height = 1;
    if (has_min_height()) {
      total_size += 1 + 8;
    }

    // required double fade_dist = 2;
    if (has_fade_dist()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapGeom_Blend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeightmapGeom_Blend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapGeom_Blend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapGeom_Blend::MergeFrom(const HeightmapGeom_Blend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_height()) {
      set_min_height(from.min_height());
    }
    if (from.has_fade_dist()) {
      set_fade_dist(from.fade_dist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeightmapGeom_Blend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom_Blend::CopyFrom(const HeightmapGeom_Blend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom_Blend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeightmapGeom_Blend::Swap(HeightmapGeom_Blend* other) {
  if (other != this) {
    std::swap(min_height_, other->min_height_);
    std::swap(fade_dist_, other->fade_dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeightmapGeom_Blend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapGeom_Blend_descriptor_;
  metadata.reflection = HeightmapGeom_Blend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HeightmapGeom::kImageFieldNumber;
const int HeightmapGeom::kSizeFieldNumber;
const int HeightmapGeom::kOriginFieldNumber;
const int HeightmapGeom::kHeightsFieldNumber;
const int HeightmapGeom::kWidthFieldNumber;
const int HeightmapGeom::kHeightFieldNumber;
const int HeightmapGeom::kTextureFieldNumber;
const int HeightmapGeom::kBlendFieldNumber;
#endif  // !_MSC_VER

HeightmapGeom::HeightmapGeom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeightmapGeom::InitAsDefaultInstance() {
  image_ = const_cast< ::gazebo::msgs::Image*>(&::gazebo::msgs::Image::default_instance());
  size_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  origin_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

HeightmapGeom::HeightmapGeom(const HeightmapGeom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeightmapGeom::SharedCtor() {
  _cached_size_ = 0;
  image_ = NULL;
  size_ = NULL;
  origin_ = NULL;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightmapGeom::~HeightmapGeom() {
  SharedDtor();
}

void HeightmapGeom::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete size_;
    delete origin_;
  }
}

void HeightmapGeom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightmapGeom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightmapGeom_descriptor_;
}

const HeightmapGeom& HeightmapGeom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heightmapgeom_2eproto();
  return *default_instance_;
}

HeightmapGeom* HeightmapGeom::default_instance_ = NULL;

HeightmapGeom* HeightmapGeom::New() const {
  return new HeightmapGeom;
}

void HeightmapGeom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != NULL) image_->::gazebo::msgs::Image::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::gazebo::msgs::Vector3d::Clear();
    }
    width_ = 0;
    height_ = 0;
  }
  heights_.Clear();
  texture_.Clear();
  blend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeightmapGeom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Image image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required .gazebo.msgs.Vector3d size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }

      // optional .gazebo.msgs.Vector3d origin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_heights;
        break;
      }

      // repeated float heights = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_heights;
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_texture;
        break;
      }

      // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_texture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_texture;
        if (input->ExpectTag(66)) goto parse_blend;
        break;
      }

      // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_blend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeightmapGeom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gazebo.msgs.Image image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(), output);
  }

  // required .gazebo.msgs.Vector3d size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // optional .gazebo.msgs.Vector3d origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->origin(), output);
  }

  // repeated float heights = 4;
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->heights(i), output);
  }

  // optional int32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  for (int i = 0; i < this->texture_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->texture(i), output);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  for (int i = 0; i < this->blend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->blend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeightmapGeom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gazebo.msgs.Image image = 1;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(), target);
  }

  // required .gazebo.msgs.Vector3d size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // optional .gazebo.msgs.Vector3d origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->origin(), target);
  }

  // repeated float heights = 4;
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->heights(i), target);
  }

  // optional int32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional int32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  for (int i = 0; i < this->texture_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->texture(i), target);
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  for (int i = 0; i < this->blend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->blend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeightmapGeom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gazebo.msgs.Image image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // required .gazebo.msgs.Vector3d size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // optional .gazebo.msgs.Vector3d origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  // repeated float heights = 4;
  {
    int data_size = 0;
    data_size = 4 * this->heights_size();
    total_size += 1 * this->heights_size() + data_size;
  }

  // repeated .gazebo.msgs.HeightmapGeom.Texture texture = 7;
  total_size += 1 * this->texture_size();
  for (int i = 0; i < this->texture_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->texture(i));
  }

  // repeated .gazebo.msgs.HeightmapGeom.Blend blend = 8;
  total_size += 1 * this->blend_size();
  for (int i = 0; i < this->blend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightmapGeom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeightmapGeom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightmapGeom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightmapGeom::MergeFrom(const HeightmapGeom& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  texture_.MergeFrom(from.texture_);
  blend_.MergeFrom(from.blend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      mutable_image()->::gazebo::msgs::Image::MergeFrom(from.image());
    }
    if (from.has_size()) {
      mutable_size()->::gazebo::msgs::Vector3d::MergeFrom(from.size());
    }
    if (from.has_origin()) {
      mutable_origin()->::gazebo::msgs::Vector3d::MergeFrom(from.origin());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeightmapGeom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightmapGeom::CopyFrom(const HeightmapGeom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightmapGeom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  for (int i = 0; i < texture_size(); i++) {
    if (!this->texture(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blend_size(); i++) {
    if (!this->blend(i).IsInitialized()) return false;
  }
  return true;
}

void HeightmapGeom::Swap(HeightmapGeom* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(size_, other->size_);
    std::swap(origin_, other->origin_);
    heights_.Swap(&other->heights_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    texture_.Swap(&other->texture_);
    blend_.Swap(&other->blend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeightmapGeom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightmapGeom_descriptor_;
  metadata.reflection = HeightmapGeom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.HeightmapGeom", HeightmapGeom)
// @@protoc_insertion_point(global_scope)
