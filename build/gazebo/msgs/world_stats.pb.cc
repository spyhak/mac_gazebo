// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "world_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* WorldStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldStatistics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_world_5fstats_2eproto() {
  protobuf_AddDesc_world_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "world_stats.proto");
  GOOGLE_CHECK(file != NULL);
  WorldStatistics_descriptor_ = file->message_type(0);
  static const int WorldStatistics_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, pause_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, real_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, paused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, model_count_),
  };
  WorldStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldStatistics_descriptor_,
      WorldStatistics::default_instance_,
      WorldStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldStatistics));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_world_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldStatistics_descriptor_, &WorldStatistics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_world_5fstats_2eproto() {
  delete WorldStatistics::default_instance_;
  delete WorldStatistics_reflection_;
}

void protobuf_AddDesc_world_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_header_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021world_stats.proto\022\013gazebo.msgs\032\014header"
    ".proto\032\ntime.proto\"\274\001\n\017WorldStatistics\022#"
    "\n\010sim_time\030\002 \002(\0132\021.gazebo.msgs.Time\022%\n\np"
    "ause_time\030\003 \002(\0132\021.gazebo.msgs.Time\022$\n\tre"
    "al_time\030\004 \002(\0132\021.gazebo.msgs.Time\022\016\n\006paus"
    "ed\030\005 \002(\010\022\022\n\niterations\030\006 \002(\004\022\023\n\013model_co"
    "unt\030\007 \001(\005", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "world_stats.proto", &protobuf_RegisterTypes);
  WorldStatistics::default_instance_ = new WorldStatistics();
  WorldStatistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world_5fstats_2eproto {
  StaticDescriptorInitializer_world_5fstats_2eproto() {
    protobuf_AddDesc_world_5fstats_2eproto();
  }
} static_descriptor_initializer_world_5fstats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldStatistics::kSimTimeFieldNumber;
const int WorldStatistics::kPauseTimeFieldNumber;
const int WorldStatistics::kRealTimeFieldNumber;
const int WorldStatistics::kPausedFieldNumber;
const int WorldStatistics::kIterationsFieldNumber;
const int WorldStatistics::kModelCountFieldNumber;
#endif  // !_MSC_VER

WorldStatistics::WorldStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldStatistics::InitAsDefaultInstance() {
  sim_time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  pause_time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  real_time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

WorldStatistics::WorldStatistics(const WorldStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldStatistics::SharedCtor() {
  _cached_size_ = 0;
  sim_time_ = NULL;
  pause_time_ = NULL;
  real_time_ = NULL;
  paused_ = false;
  iterations_ = GOOGLE_ULONGLONG(0);
  model_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldStatistics::~WorldStatistics() {
  SharedDtor();
}

void WorldStatistics::SharedDtor() {
  if (this != default_instance_) {
    delete sim_time_;
    delete pause_time_;
    delete real_time_;
  }
}

void WorldStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldStatistics_descriptor_;
}

const WorldStatistics& WorldStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_5fstats_2eproto();
  return *default_instance_;
}

WorldStatistics* WorldStatistics::default_instance_ = NULL;

WorldStatistics* WorldStatistics::New() const {
  return new WorldStatistics;
}

void WorldStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sim_time()) {
      if (sim_time_ != NULL) sim_time_->::gazebo::msgs::Time::Clear();
    }
    if (has_pause_time()) {
      if (pause_time_ != NULL) pause_time_->::gazebo::msgs::Time::Clear();
    }
    if (has_real_time()) {
      if (real_time_ != NULL) real_time_->::gazebo::msgs::Time::Clear();
    }
    paused_ = false;
    iterations_ = GOOGLE_ULONGLONG(0);
    model_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Time sim_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pause_time;
        break;
      }

      // required .gazebo.msgs.Time pause_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pause_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pause_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_real_time;
        break;
      }

      // required .gazebo.msgs.Time real_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_paused;
        break;
      }

      // required bool paused = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
          set_has_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iterations;
        break;
      }

      // required uint64 iterations = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &iterations_)));
          set_has_iterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_model_count;
        break;
      }

      // optional int32 model_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_count_)));
          set_has_model_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gazebo.msgs.Time sim_time = 2;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sim_time(), output);
  }

  // required .gazebo.msgs.Time pause_time = 3;
  if (has_pause_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pause_time(), output);
  }

  // required .gazebo.msgs.Time real_time = 4;
  if (has_real_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->real_time(), output);
  }

  // required bool paused = 5;
  if (has_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->paused(), output);
  }

  // required uint64 iterations = 6;
  if (has_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->iterations(), output);
  }

  // optional int32 model_count = 7;
  if (has_model_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->model_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gazebo.msgs.Time sim_time = 2;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sim_time(), target);
  }

  // required .gazebo.msgs.Time pause_time = 3;
  if (has_pause_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pause_time(), target);
  }

  // required .gazebo.msgs.Time real_time = 4;
  if (has_real_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->real_time(), target);
  }

  // required bool paused = 5;
  if (has_paused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->paused(), target);
  }

  // required uint64 iterations = 6;
  if (has_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->iterations(), target);
  }

  // optional int32 model_count = 7;
  if (has_model_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->model_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Time sim_time = 2;
    if (has_sim_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sim_time());
    }

    // required .gazebo.msgs.Time pause_time = 3;
    if (has_pause_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pause_time());
    }

    // required .gazebo.msgs.Time real_time = 4;
    if (has_real_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_time());
    }

    // required bool paused = 5;
    if (has_paused()) {
      total_size += 1 + 1;
    }

    // required uint64 iterations = 6;
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->iterations());
    }

    // optional int32 model_count = 7;
    if (has_model_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldStatistics::MergeFrom(const WorldStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_time()) {
      mutable_sim_time()->::gazebo::msgs::Time::MergeFrom(from.sim_time());
    }
    if (from.has_pause_time()) {
      mutable_pause_time()->::gazebo::msgs::Time::MergeFrom(from.pause_time());
    }
    if (from.has_real_time()) {
      mutable_real_time()->::gazebo::msgs::Time::MergeFrom(from.real_time());
    }
    if (from.has_paused()) {
      set_paused(from.paused());
    }
    if (from.has_iterations()) {
      set_iterations(from.iterations());
    }
    if (from.has_model_count()) {
      set_model_count(from.model_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldStatistics::CopyFrom(const WorldStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_sim_time()) {
    if (!this->sim_time().IsInitialized()) return false;
  }
  if (has_pause_time()) {
    if (!this->pause_time().IsInitialized()) return false;
  }
  if (has_real_time()) {
    if (!this->real_time().IsInitialized()) return false;
  }
  return true;
}

void WorldStatistics::Swap(WorldStatistics* other) {
  if (other != this) {
    std::swap(sim_time_, other->sim_time_);
    std::swap(pause_time_, other->pause_time_);
    std::swap(real_time_, other->real_time_);
    std::swap(paused_, other->paused_);
    std::swap(iterations_, other->iterations_);
    std::swap(model_count_, other->model_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldStatistics_descriptor_;
  metadata.reflection = WorldStatistics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.WorldStatistics", WorldStatistics)
// @@protoc_insertion_point(global_scope)
