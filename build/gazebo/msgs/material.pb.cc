// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: material.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "material.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* Material_Script_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_Script_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_material_2eproto() {
  protobuf_AddDesc_material_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "material.proto");
  GOOGLE_CHECK(file != NULL);
  Material_descriptor_ = file->message_type(0);
  static const int Material_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, shader_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, normal_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, ambient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, diffuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, specular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, emissive_),
  };
  Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_descriptor_,
      Material::default_instance_,
      Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material));
  Material_Script_descriptor_ = Material_descriptor_->nested_type(0);
  static const int Material_Script_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, name_),
  };
  Material_Script_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_Script_descriptor_,
      Material_Script::default_instance_,
      Material_Script_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Script, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material_Script));
  Material_ShaderType_descriptor_ = Material_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_material_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_descriptor_, &Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_Script_descriptor_, &Material_Script::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_material_2eproto() {
  delete Material::default_instance_;
  delete Material_reflection_;
  delete Material_Script::default_instance_;
  delete Material_Script_reflection_;
}

void protobuf_AddDesc_material_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016material.proto\022\013gazebo.msgs\032\013color.pro"
    "to\"\236\003\n\010Material\022,\n\006script\030\001 \001(\0132\034.gazebo"
    ".msgs.Material.Script\0225\n\013shader_type\030\002 \001"
    "(\0162 .gazebo.msgs.Material.ShaderType\022\022\n\n"
    "normal_map\030\003 \001(\t\022#\n\007ambient\030\004 \001(\0132\022.gaze"
    "bo.msgs.Color\022#\n\007diffuse\030\005 \001(\0132\022.gazebo."
    "msgs.Color\022$\n\010specular\030\006 \001(\0132\022.gazebo.ms"
    "gs.Color\022$\n\010emissive\030\007 \001(\0132\022.gazebo.msgs"
    ".Color\032#\n\006Script\022\013\n\003uri\030\001 \003(\t\022\014\n\004name\030\002 "
    "\002(\t\"^\n\nShaderType\022\n\n\006VERTEX\020\001\022\t\n\005PIXEL\020\002"
    "\022\033\n\027NORMAL_MAP_OBJECT_SPACE\020\003\022\034\n\030NORMAL_"
    "MAP_TANGENT_SPACE\020\004", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "material.proto", &protobuf_RegisterTypes);
  Material::default_instance_ = new Material();
  Material_Script::default_instance_ = new Material_Script();
  Material::default_instance_->InitAsDefaultInstance();
  Material_Script::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_material_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_material_2eproto {
  StaticDescriptorInitializer_material_2eproto() {
    protobuf_AddDesc_material_2eproto();
  }
} static_descriptor_initializer_material_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Material_ShaderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_ShaderType_descriptor_;
}
bool Material_ShaderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Material_ShaderType Material::VERTEX;
const Material_ShaderType Material::PIXEL;
const Material_ShaderType Material::NORMAL_MAP_OBJECT_SPACE;
const Material_ShaderType Material::NORMAL_MAP_TANGENT_SPACE;
const Material_ShaderType Material::ShaderType_MIN;
const Material_ShaderType Material::ShaderType_MAX;
const int Material::ShaderType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Material_Script::kUriFieldNumber;
const int Material_Script::kNameFieldNumber;
#endif  // !_MSC_VER

Material_Script::Material_Script()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Material_Script::InitAsDefaultInstance() {
}

Material_Script::Material_Script(const Material_Script& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Material_Script::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material_Script::~Material_Script() {
  SharedDtor();
}

void Material_Script::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Material_Script::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material_Script::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_Script_descriptor_;
}

const Material_Script& Material_Script::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_material_2eproto();
  return *default_instance_;
}

Material_Script* Material_Script::default_instance_ = NULL;

Material_Script* Material_Script::New() const {
  return new Material_Script;
}

void Material_Script::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  uri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material_Script::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri(this->uri_size() - 1).data(),
            this->uri(this->uri_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uri;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material_Script::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string uri = 1;
  for (int i = 0; i < this->uri_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->uri(i).data(), this->uri(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(i), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Material_Script::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string uri = 1;
  for (int i = 0; i < this->uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri(i).data(), this->uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->uri(i), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Material_Script::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string uri = 1;
  total_size += 1 * this->uri_size();
  for (int i = 0; i < this->uri_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->uri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material_Script::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material_Script* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material_Script*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material_Script::MergeFrom(const Material_Script& from) {
  GOOGLE_CHECK_NE(&from, this);
  uri_.MergeFrom(from.uri_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material_Script::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material_Script::CopyFrom(const Material_Script& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_Script::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Material_Script::Swap(Material_Script* other) {
  if (other != this) {
    uri_.Swap(&other->uri_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material_Script::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_Script_descriptor_;
  metadata.reflection = Material_Script_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Material::kScriptFieldNumber;
const int Material::kShaderTypeFieldNumber;
const int Material::kNormalMapFieldNumber;
const int Material::kAmbientFieldNumber;
const int Material::kDiffuseFieldNumber;
const int Material::kSpecularFieldNumber;
const int Material::kEmissiveFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Material::InitAsDefaultInstance() {
  script_ = const_cast< ::gazebo::msgs::Material_Script*>(&::gazebo::msgs::Material_Script::default_instance());
  ambient_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
  diffuse_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
  specular_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
  emissive_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
}

Material::Material(const Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Material::SharedCtor() {
  _cached_size_ = 0;
  script_ = NULL;
  shader_type_ = 1;
  normal_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ambient_ = NULL;
  diffuse_ = NULL;
  specular_ = NULL;
  emissive_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  SharedDtor();
}

void Material::SharedDtor() {
  if (normal_map_ != &::google::protobuf::internal::kEmptyString) {
    delete normal_map_;
  }
  if (this != default_instance_) {
    delete script_;
    delete ambient_;
    delete diffuse_;
    delete specular_;
    delete emissive_;
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_descriptor_;
}

const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_material_2eproto();
  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New() const {
  return new Material;
}

void Material::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_script()) {
      if (script_ != NULL) script_->::gazebo::msgs::Material_Script::Clear();
    }
    shader_type_ = 1;
    if (has_normal_map()) {
      if (normal_map_ != &::google::protobuf::internal::kEmptyString) {
        normal_map_->clear();
      }
    }
    if (has_ambient()) {
      if (ambient_ != NULL) ambient_->::gazebo::msgs::Color::Clear();
    }
    if (has_diffuse()) {
      if (diffuse_ != NULL) diffuse_->::gazebo::msgs::Color::Clear();
    }
    if (has_specular()) {
      if (specular_ != NULL) specular_->::gazebo::msgs::Color::Clear();
    }
    if (has_emissive()) {
      if (emissive_ != NULL) emissive_->::gazebo::msgs::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Material.Script script = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_script()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shader_type;
        break;
      }

      // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shader_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Material_ShaderType_IsValid(value)) {
            set_shader_type(static_cast< ::gazebo::msgs::Material_ShaderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_normal_map;
        break;
      }

      // optional string normal_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normal_map().data(), this->normal_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ambient;
        break;
      }

      // optional .gazebo.msgs.Color ambient = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ambient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_diffuse;
        break;
      }

      // optional .gazebo.msgs.Color diffuse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffuse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_specular;
        break;
      }

      // optional .gazebo.msgs.Color specular = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_specular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specular()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_emissive;
        break;
      }

      // optional .gazebo.msgs.Color emissive = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emissive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emissive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gazebo.msgs.Material.Script script = 1;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->script(), output);
  }

  // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
  if (has_shader_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->shader_type(), output);
  }

  // optional string normal_map = 3;
  if (has_normal_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal_map().data(), this->normal_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->normal_map(), output);
  }

  // optional .gazebo.msgs.Color ambient = 4;
  if (has_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ambient(), output);
  }

  // optional .gazebo.msgs.Color diffuse = 5;
  if (has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->diffuse(), output);
  }

  // optional .gazebo.msgs.Color specular = 6;
  if (has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->specular(), output);
  }

  // optional .gazebo.msgs.Color emissive = 7;
  if (has_emissive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->emissive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gazebo.msgs.Material.Script script = 1;
  if (has_script()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->script(), target);
  }

  // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
  if (has_shader_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->shader_type(), target);
  }

  // optional string normal_map = 3;
  if (has_normal_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal_map().data(), this->normal_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->normal_map(), target);
  }

  // optional .gazebo.msgs.Color ambient = 4;
  if (has_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ambient(), target);
  }

  // optional .gazebo.msgs.Color diffuse = 5;
  if (has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->diffuse(), target);
  }

  // optional .gazebo.msgs.Color specular = 6;
  if (has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->specular(), target);
  }

  // optional .gazebo.msgs.Color emissive = 7;
  if (has_emissive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->emissive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gazebo.msgs.Material.Script script = 1;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->script());
    }

    // optional .gazebo.msgs.Material.ShaderType shader_type = 2;
    if (has_shader_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shader_type());
    }

    // optional string normal_map = 3;
    if (has_normal_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal_map());
    }

    // optional .gazebo.msgs.Color ambient = 4;
    if (has_ambient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ambient());
    }

    // optional .gazebo.msgs.Color diffuse = 5;
    if (has_diffuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diffuse());
    }

    // optional .gazebo.msgs.Color specular = 6;
    if (has_specular()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specular());
    }

    // optional .gazebo.msgs.Color emissive = 7;
    if (has_emissive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emissive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script()) {
      mutable_script()->::gazebo::msgs::Material_Script::MergeFrom(from.script());
    }
    if (from.has_shader_type()) {
      set_shader_type(from.shader_type());
    }
    if (from.has_normal_map()) {
      set_normal_map(from.normal_map());
    }
    if (from.has_ambient()) {
      mutable_ambient()->::gazebo::msgs::Color::MergeFrom(from.ambient());
    }
    if (from.has_diffuse()) {
      mutable_diffuse()->::gazebo::msgs::Color::MergeFrom(from.diffuse());
    }
    if (from.has_specular()) {
      mutable_specular()->::gazebo::msgs::Color::MergeFrom(from.specular());
    }
    if (from.has_emissive()) {
      mutable_emissive()->::gazebo::msgs::Color::MergeFrom(from.emissive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {

  if (has_script()) {
    if (!this->script().IsInitialized()) return false;
  }
  if (has_ambient()) {
    if (!this->ambient().IsInitialized()) return false;
  }
  if (has_diffuse()) {
    if (!this->diffuse().IsInitialized()) return false;
  }
  if (has_specular()) {
    if (!this->specular().IsInitialized()) return false;
  }
  if (has_emissive()) {
    if (!this->emissive().IsInitialized()) return false;
  }
  return true;
}

void Material::Swap(Material* other) {
  if (other != this) {
    std::swap(script_, other->script_);
    std::swap(shader_type_, other->shader_type_);
    std::swap(normal_map_, other->normal_map_);
    std::swap(ambient_, other->ambient_);
    std::swap(diffuse_, other->diffuse_);
    std::swap(specular_, other->specular_);
    std::swap(emissive_, other->emissive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_descriptor_;
  metadata.reflection = Material_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Material", Material)
// @@protoc_insertion_point(global_scope)
