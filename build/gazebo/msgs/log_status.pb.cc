// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* LogStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStatus_LogFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStatus_LogFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogStatus_LogFile_Units_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5fstatus_2eproto() {
  protobuf_AddDesc_log_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_status.proto");
  GOOGLE_CHECK(file != NULL);
  LogStatus_descriptor_ = file->message_type(0);
  static const int LogStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, log_file_),
  };
  LogStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStatus_descriptor_,
      LogStatus::default_instance_,
      LogStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStatus));
  LogStatus_LogFile_descriptor_ = LogStatus_descriptor_->nested_type(0);
  static const int LogStatus_LogFile_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, base_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, full_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, size_units_),
  };
  LogStatus_LogFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStatus_LogFile_descriptor_,
      LogStatus_LogFile::default_instance_,
      LogStatus_LogFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatus_LogFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStatus_LogFile));
  LogStatus_LogFile_Units_descriptor_ = LogStatus_LogFile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStatus_descriptor_, &LogStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStatus_LogFile_descriptor_, &LogStatus_LogFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5fstatus_2eproto() {
  delete LogStatus::default_instance_;
  delete LogStatus_reflection_;
  delete LogStatus_LogFile::default_instance_;
  delete LogStatus_LogFile_reflection_;
}

void protobuf_AddDesc_log_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020log_status.proto\022\013gazebo.msgs\032\ntime.pr"
    "oto\"\244\002\n\tLogStatus\022#\n\010sim_time\030\001 \001(\0132\021.ga"
    "zebo.msgs.Time\0220\n\010log_file\030\002 \001(\0132\036.gazeb"
    "o.msgs.LogStatus.LogFile\032\277\001\n\007LogFile\022\013\n\003"
    "uri\030\001 \001(\t\022\021\n\tbase_path\030\002 \001(\t\022\021\n\tfull_pat"
    "h\030\003 \001(\t\022\014\n\004size\030\004 \001(\002\0228\n\nsize_units\030\005 \001("
    "\0162$.gazebo.msgs.LogStatus.LogFile.Units\""
    "9\n\005Units\022\t\n\005BYTES\020\001\022\013\n\007K_BYTES\020\002\022\013\n\007M_BY"
    "TES\020\003\022\013\n\007G_BYTES\020\004", 338);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_status.proto", &protobuf_RegisterTypes);
  LogStatus::default_instance_ = new LogStatus();
  LogStatus_LogFile::default_instance_ = new LogStatus_LogFile();
  LogStatus::default_instance_->InitAsDefaultInstance();
  LogStatus_LogFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5fstatus_2eproto {
  StaticDescriptorInitializer_log_5fstatus_2eproto() {
    protobuf_AddDesc_log_5fstatus_2eproto();
  }
} static_descriptor_initializer_log_5fstatus_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LogStatus_LogFile_Units_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatus_LogFile_Units_descriptor_;
}
bool LogStatus_LogFile_Units_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogStatus_LogFile_Units LogStatus_LogFile::BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::K_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::M_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::G_BYTES;
const LogStatus_LogFile_Units LogStatus_LogFile::Units_MIN;
const LogStatus_LogFile_Units LogStatus_LogFile::Units_MAX;
const int LogStatus_LogFile::Units_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogStatus_LogFile::kUriFieldNumber;
const int LogStatus_LogFile::kBasePathFieldNumber;
const int LogStatus_LogFile::kFullPathFieldNumber;
const int LogStatus_LogFile::kSizeFieldNumber;
const int LogStatus_LogFile::kSizeUnitsFieldNumber;
#endif  // !_MSC_VER

LogStatus_LogFile::LogStatus_LogFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStatus_LogFile::InitAsDefaultInstance() {
}

LogStatus_LogFile::LogStatus_LogFile(const LogStatus_LogFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStatus_LogFile::SharedCtor() {
  _cached_size_ = 0;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  base_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  size_units_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStatus_LogFile::~LogStatus_LogFile() {
  SharedDtor();
}

void LogStatus_LogFile::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (base_path_ != &::google::protobuf::internal::kEmptyString) {
    delete base_path_;
  }
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    delete full_path_;
  }
  if (this != default_instance_) {
  }
}

void LogStatus_LogFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStatus_LogFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatus_LogFile_descriptor_;
}

const LogStatus_LogFile& LogStatus_LogFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fstatus_2eproto();
  return *default_instance_;
}

LogStatus_LogFile* LogStatus_LogFile::default_instance_ = NULL;

LogStatus_LogFile* LogStatus_LogFile::New() const {
  return new LogStatus_LogFile;
}

void LogStatus_LogFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
    if (has_base_path()) {
      if (base_path_ != &::google::protobuf::internal::kEmptyString) {
        base_path_->clear();
      }
    }
    if (has_full_path()) {
      if (full_path_ != &::google::protobuf::internal::kEmptyString) {
        full_path_->clear();
      }
    }
    size_ = 0;
    size_units_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStatus_LogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_path;
        break;
      }

      // optional string base_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_path().data(), this->base_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_full_path;
        break;
      }

      // optional string full_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_size;
        break;
      }

      // optional float size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_size_units;
        break;
      }

      // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::LogStatus_LogFile_Units_IsValid(value)) {
            set_size_units(static_cast< ::gazebo::msgs::LogStatus_LogFile_Units >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStatus_LogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uri(), output);
  }

  // optional string base_path = 2;
  if (has_base_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->base_path(), output);
  }

  // optional string full_path = 3;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->full_path(), output);
  }

  // optional float size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->size(), output);
  }

  // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
  if (has_size_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->size_units(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStatus_LogFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string base_path = 2;
  if (has_base_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_path().data(), this->base_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->base_path(), target);
  }

  // optional string full_path = 3;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->full_path(), target);
  }

  // optional float size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->size(), target);
  }

  // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
  if (has_size_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->size_units(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStatus_LogFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string base_path = 2;
    if (has_base_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_path());
    }

    // optional string full_path = 3;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }

    // optional float size = 4;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional .gazebo.msgs.LogStatus.LogFile.Units size_units = 5;
    if (has_size_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->size_units());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStatus_LogFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStatus_LogFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStatus_LogFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStatus_LogFile::MergeFrom(const LogStatus_LogFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_base_path()) {
      set_base_path(from.base_path());
    }
    if (from.has_full_path()) {
      set_full_path(from.full_path());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_size_units()) {
      set_size_units(from.size_units());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStatus_LogFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatus_LogFile::CopyFrom(const LogStatus_LogFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatus_LogFile::IsInitialized() const {

  return true;
}

void LogStatus_LogFile::Swap(LogStatus_LogFile* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(base_path_, other->base_path_);
    std::swap(full_path_, other->full_path_);
    std::swap(size_, other->size_);
    std::swap(size_units_, other->size_units_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStatus_LogFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStatus_LogFile_descriptor_;
  metadata.reflection = LogStatus_LogFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogStatus::kSimTimeFieldNumber;
const int LogStatus::kLogFileFieldNumber;
#endif  // !_MSC_VER

LogStatus::LogStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStatus::InitAsDefaultInstance() {
  sim_time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
  log_file_ = const_cast< ::gazebo::msgs::LogStatus_LogFile*>(&::gazebo::msgs::LogStatus_LogFile::default_instance());
}

LogStatus::LogStatus(const LogStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStatus::SharedCtor() {
  _cached_size_ = 0;
  sim_time_ = NULL;
  log_file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStatus::~LogStatus() {
  SharedDtor();
}

void LogStatus::SharedDtor() {
  if (this != default_instance_) {
    delete sim_time_;
    delete log_file_;
  }
}

void LogStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatus_descriptor_;
}

const LogStatus& LogStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5fstatus_2eproto();
  return *default_instance_;
}

LogStatus* LogStatus::default_instance_ = NULL;

LogStatus* LogStatus::New() const {
  return new LogStatus;
}

void LogStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sim_time()) {
      if (sim_time_ != NULL) sim_time_->::gazebo::msgs::Time::Clear();
    }
    if (has_log_file()) {
      if (log_file_ != NULL) log_file_->::gazebo::msgs::LogStatus_LogFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Time sim_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sim_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_log_file;
        break;
      }

      // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gazebo.msgs.Time sim_time = 1;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sim_time(), output);
  }

  // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->log_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gazebo.msgs.Time sim_time = 1;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sim_time(), target);
  }

  // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
  if (has_log_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->log_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gazebo.msgs.Time sim_time = 1;
    if (has_sim_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sim_time());
    }

    // optional .gazebo.msgs.LogStatus.LogFile log_file = 2;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStatus::MergeFrom(const LogStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_time()) {
      mutable_sim_time()->::gazebo::msgs::Time::MergeFrom(from.sim_time());
    }
    if (from.has_log_file()) {
      mutable_log_file()->::gazebo::msgs::LogStatus_LogFile::MergeFrom(from.log_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatus::CopyFrom(const LogStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatus::IsInitialized() const {

  if (has_sim_time()) {
    if (!this->sim_time().IsInitialized()) return false;
  }
  return true;
}

void LogStatus::Swap(LogStatus* other) {
  if (other != this) {
    std::swap(sim_time_, other->sim_time_);
    std::swap(log_file_, other->log_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStatus_descriptor_;
  metadata.reflection = LogStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.LogStatus", LogStatus)
// @@protoc_insertion_point(global_scope)
