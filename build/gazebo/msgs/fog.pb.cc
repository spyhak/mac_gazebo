// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Fog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Fog_FogType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fog_2eproto() {
  protobuf_AddDesc_fog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fog.proto");
  GOOGLE_CHECK(file != NULL);
  Fog_descriptor_ = file->message_type(0);
  static const int Fog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, end_),
  };
  Fog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fog_descriptor_,
      Fog::default_instance_,
      Fog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fog));
  Fog_FogType_descriptor_ = Fog_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fog_descriptor_, &Fog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fog_2eproto() {
  delete Fog::default_instance_;
  delete Fog_reflection_;
}

void protobuf_AddDesc_fog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_color_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tfog.proto\022\013gazebo.msgs\032\013color.proto\"\301\001"
    "\n\003Fog\022&\n\004type\030\001 \001(\0162\030.gazebo.msgs.Fog.Fo"
    "gType\022!\n\005color\030\002 \001(\0132\022.gazebo.msgs.Color"
    "\022\017\n\007density\030\003 \001(\002\022\r\n\005start\030\004 \001(\002\022\013\n\003end\030"
    "\005 \001(\002\"B\n\007FogType\022\010\n\004NONE\020\001\022\n\n\006LINEAR\020\002\022\017"
    "\n\013EXPONENTIAL\020\003\022\020\n\014EXPONENTIAL2\020\004", 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fog.proto", &protobuf_RegisterTypes);
  Fog::default_instance_ = new Fog();
  Fog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fog_2eproto {
  StaticDescriptorInitializer_fog_2eproto() {
    protobuf_AddDesc_fog_2eproto();
  }
} static_descriptor_initializer_fog_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Fog_FogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fog_FogType_descriptor_;
}
bool Fog_FogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Fog_FogType Fog::NONE;
const Fog_FogType Fog::LINEAR;
const Fog_FogType Fog::EXPONENTIAL;
const Fog_FogType Fog::EXPONENTIAL2;
const Fog_FogType Fog::FogType_MIN;
const Fog_FogType Fog::FogType_MAX;
const int Fog::FogType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Fog::kTypeFieldNumber;
const int Fog::kColorFieldNumber;
const int Fog::kDensityFieldNumber;
const int Fog::kStartFieldNumber;
const int Fog::kEndFieldNumber;
#endif  // !_MSC_VER

Fog::Fog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fog::InitAsDefaultInstance() {
  color_ = const_cast< ::gazebo::msgs::Color*>(&::gazebo::msgs::Color::default_instance());
}

Fog::Fog(const Fog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fog::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  color_ = NULL;
  density_ = 0;
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fog::~Fog() {
  SharedDtor();
}

void Fog::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
  }
}

void Fog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fog_descriptor_;
}

const Fog& Fog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fog_2eproto();
  return *default_instance_;
}

Fog* Fog::default_instance_ = NULL;

Fog* Fog::New() const {
  return new Fog;
}

void Fog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_color()) {
      if (color_ != NULL) color_->::gazebo::msgs::Color::Clear();
    }
    density_ = 0;
    start_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gazebo.msgs.Fog.FogType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Fog_FogType_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::Fog_FogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional .gazebo.msgs.Color color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_density;
        break;
      }

      // optional float density = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start;
        break;
      }

      // optional float start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_end;
        break;
      }

      // optional float end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gazebo.msgs.Fog.FogType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .gazebo.msgs.Color color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->color(), output);
  }

  // optional float density = 3;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->density(), output);
  }

  // optional float start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start(), output);
  }

  // optional float end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gazebo.msgs.Fog.FogType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .gazebo.msgs.Color color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->color(), target);
  }

  // optional float density = 3;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->density(), target);
  }

  // optional float start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start(), target);
  }

  // optional float end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gazebo.msgs.Fog.FogType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .gazebo.msgs.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional float density = 3;
    if (has_density()) {
      total_size += 1 + 4;
    }

    // optional float start = 4;
    if (has_start()) {
      total_size += 1 + 4;
    }

    // optional float end = 5;
    if (has_end()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fog::MergeFrom(const Fog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      mutable_color()->::gazebo::msgs::Color::MergeFrom(from.color());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fog::CopyFrom(const Fog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fog::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void Fog::Swap(Fog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(color_, other->color_);
    std::swap(density_, other->density_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fog_descriptor_;
  metadata.reflection = Fog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Fog", Fog)
// @@protoc_insertion_point(global_scope)
