// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tactile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tactile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Tactile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tactile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tactile_2eproto() {
  protobuf_AddDesc_tactile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tactile.proto");
  GOOGLE_CHECK(file != NULL);
  Tactile_descriptor_ = file->message_type(0);
  static const int Tactile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, collision_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, collision_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, time_),
  };
  Tactile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tactile_descriptor_,
      Tactile::default_instance_,
      Tactile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tactile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tactile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tactile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tactile_descriptor_, &Tactile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tactile_2eproto() {
  delete Tactile::default_instance_;
  delete Tactile_reflection_;
}

void protobuf_AddDesc_tactile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtactile.proto\022\013gazebo.msgs\032\ntime.proto"
    "\"j\n\007Tactile\022\026\n\016collision_name\030\001 \003(\t\022\024\n\014c"
    "ollision_id\030\002 \003(\r\022\020\n\010pressure\030\003 \003(\001\022\037\n\004t"
    "ime\030\004 \002(\0132\021.gazebo.msgs.Time", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tactile.proto", &protobuf_RegisterTypes);
  Tactile::default_instance_ = new Tactile();
  Tactile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tactile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tactile_2eproto {
  StaticDescriptorInitializer_tactile_2eproto() {
    protobuf_AddDesc_tactile_2eproto();
  }
} static_descriptor_initializer_tactile_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Tactile::kCollisionNameFieldNumber;
const int Tactile::kCollisionIdFieldNumber;
const int Tactile::kPressureFieldNumber;
const int Tactile::kTimeFieldNumber;
#endif  // !_MSC_VER

Tactile::Tactile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tactile::InitAsDefaultInstance() {
  time_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

Tactile::Tactile(const Tactile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tactile::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tactile::~Tactile() {
  SharedDtor();
}

void Tactile::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void Tactile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tactile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tactile_descriptor_;
}

const Tactile& Tactile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tactile_2eproto();
  return *default_instance_;
}

Tactile* Tactile::default_instance_ = NULL;

Tactile* Tactile::New() const {
  return new Tactile;
}

void Tactile::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_time()) {
      if (time_ != NULL) time_->::gazebo::msgs::Time::Clear();
    }
  }
  collision_name_.Clear();
  collision_id_.Clear();
  pressure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tactile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string collision_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collision_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_collision_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collision_name(this->collision_name_size() - 1).data(),
            this->collision_name(this->collision_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_collision_name;
        if (input->ExpectTag(16)) goto parse_collision_id;
        break;
      }

      // repeated uint32 collision_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collision_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_collision_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_collision_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collision_id;
        if (input->ExpectTag(25)) goto parse_pressure;
        break;
      }

      // repeated double pressure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_pressure())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pressure())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_pressure;
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // required .gazebo.msgs.Time time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tactile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string collision_name = 1;
  for (int i = 0; i < this->collision_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->collision_name(i).data(), this->collision_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collision_name(i), output);
  }

  // repeated uint32 collision_id = 2;
  for (int i = 0; i < this->collision_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->collision_id(i), output);
  }

  // repeated double pressure = 3;
  for (int i = 0; i < this->pressure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->pressure(i), output);
  }

  // required .gazebo.msgs.Time time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tactile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string collision_name = 1;
  for (int i = 0; i < this->collision_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision_name(i).data(), this->collision_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->collision_name(i), target);
  }

  // repeated uint32 collision_id = 2;
  for (int i = 0; i < this->collision_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->collision_id(i), target);
  }

  // repeated double pressure = 3;
  for (int i = 0; i < this->pressure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->pressure(i), target);
  }

  // required .gazebo.msgs.Time time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tactile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required .gazebo.msgs.Time time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

  }
  // repeated string collision_name = 1;
  total_size += 1 * this->collision_name_size();
  for (int i = 0; i < this->collision_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->collision_name(i));
  }

  // repeated uint32 collision_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->collision_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->collision_id(i));
    }
    total_size += 1 * this->collision_id_size() + data_size;
  }

  // repeated double pressure = 3;
  {
    int data_size = 0;
    data_size = 8 * this->pressure_size();
    total_size += 1 * this->pressure_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tactile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tactile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tactile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tactile::MergeFrom(const Tactile& from) {
  GOOGLE_CHECK_NE(&from, this);
  collision_name_.MergeFrom(from.collision_name_);
  collision_id_.MergeFrom(from.collision_id_);
  pressure_.MergeFrom(from.pressure_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_time()) {
      mutable_time()->::gazebo::msgs::Time::MergeFrom(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tactile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tactile::CopyFrom(const Tactile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tactile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void Tactile::Swap(Tactile* other) {
  if (other != this) {
    collision_name_.Swap(&other->collision_name_);
    collision_id_.Swap(&other->collision_id_);
    pressure_.Swap(&other->pressure_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tactile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tactile_descriptor_;
  metadata.reflection = Tactile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Tactile", Tactile)
// @@protoc_insertion_point(global_scope)
