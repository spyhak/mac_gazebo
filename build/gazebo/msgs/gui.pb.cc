// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* GUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gui_2eproto() {
  protobuf_AddDesc_gui_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gui.proto");
  GOOGLE_CHECK(file != NULL);
  GUI_descriptor_ = file->message_type(0);
  static const int GUI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUI, fullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUI, camera_),
  };
  GUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GUI_descriptor_,
      GUI::default_instance_,
      GUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GUI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gui_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GUI_descriptor_, &GUI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gui_2eproto() {
  delete GUI::default_instance_;
  delete GUI_reflection_;
}

void protobuf_AddDesc_gui_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_gui_5fcamera_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tgui.proto\022\013gazebo.msgs\032\020gui_camera.pro"
    "to\"A\n\003GUI\022\022\n\nfullscreen\030\001 \001(\010\022&\n\006camera\030"
    "\002 \001(\0132\026.gazebo.msgs.GUICamera", 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gui.proto", &protobuf_RegisterTypes);
  GUI::default_instance_ = new GUI();
  GUI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gui_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gui_2eproto {
  StaticDescriptorInitializer_gui_2eproto() {
    protobuf_AddDesc_gui_2eproto();
  }
} static_descriptor_initializer_gui_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GUI::kFullscreenFieldNumber;
const int GUI::kCameraFieldNumber;
#endif  // !_MSC_VER

GUI::GUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GUI::InitAsDefaultInstance() {
  camera_ = const_cast< ::gazebo::msgs::GUICamera*>(&::gazebo::msgs::GUICamera::default_instance());
}

GUI::GUI(const GUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GUI::SharedCtor() {
  _cached_size_ = 0;
  fullscreen_ = false;
  camera_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUI::~GUI() {
  SharedDtor();
}

void GUI::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
  }
}

void GUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUI_descriptor_;
}

const GUI& GUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gui_2eproto();
  return *default_instance_;
}

GUI* GUI::default_instance_ = NULL;

GUI* GUI::New() const {
  return new GUI;
}

void GUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fullscreen_ = false;
    if (has_camera()) {
      if (camera_ != NULL) camera_->::gazebo::msgs::GUICamera::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool fullscreen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fullscreen_)));
          set_has_fullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_camera;
        break;
      }

      // optional .gazebo.msgs.GUICamera camera = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool fullscreen = 1;
  if (has_fullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fullscreen(), output);
  }

  // optional .gazebo.msgs.GUICamera camera = 2;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camera(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool fullscreen = 1;
  if (has_fullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fullscreen(), target);
  }

  // optional .gazebo.msgs.GUICamera camera = 2;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camera(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool fullscreen = 1;
    if (has_fullscreen()) {
      total_size += 1 + 1;
    }

    // optional .gazebo.msgs.GUICamera camera = 2;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GUI::MergeFrom(const GUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fullscreen()) {
      set_fullscreen(from.fullscreen());
    }
    if (from.has_camera()) {
      mutable_camera()->::gazebo::msgs::GUICamera::MergeFrom(from.camera());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUI::CopyFrom(const GUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUI::IsInitialized() const {

  if (has_camera()) {
    if (!this->camera().IsInitialized()) return false;
  }
  return true;
}

void GUI::Swap(GUI* other) {
  if (other != this) {
    std::swap(fullscreen_, other->fullscreen_);
    std::swap(camera_, other->camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUI_descriptor_;
  metadata.reflection = GUI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.GUI", GUI)
// @@protoc_insertion_point(global_scope)
