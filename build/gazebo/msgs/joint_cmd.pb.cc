// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joint_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* JointCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointCmd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_joint_5fcmd_2eproto() {
  protobuf_AddDesc_joint_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "joint_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  JointCmd_descriptor_ = file->message_type(0);
  static const int JointCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, reset_),
  };
  JointCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointCmd_descriptor_,
      JointCmd::default_instance_,
      JointCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointCmd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_joint_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointCmd_descriptor_, &JointCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joint_5fcmd_2eproto() {
  delete JointCmd::default_instance_;
  delete JointCmd_reflection_;
}

void protobuf_AddDesc_joint_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_axis_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_pid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017joint_cmd.proto\022\013gazebo.msgs\032\016vector3d"
    ".proto\032\naxis.proto\032\npose.proto\032\tpid.prot"
    "o\"\217\001\n\010JointCmd\022\014\n\004name\030\001 \002(\t\022\017\n\004axis\030\002 \001"
    "(\005:\0010\022\r\n\005force\030\003 \001(\001\022\"\n\010position\030\004 \001(\0132\020"
    ".gazebo.msgs.PID\022\"\n\010velocity\030\005 \001(\0132\020.gaz"
    "ebo.msgs.PID\022\r\n\005reset\030\006 \001(\010", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joint_cmd.proto", &protobuf_RegisterTypes);
  JointCmd::default_instance_ = new JointCmd();
  JointCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joint_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joint_5fcmd_2eproto {
  StaticDescriptorInitializer_joint_5fcmd_2eproto() {
    protobuf_AddDesc_joint_5fcmd_2eproto();
  }
} static_descriptor_initializer_joint_5fcmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int JointCmd::kNameFieldNumber;
const int JointCmd::kAxisFieldNumber;
const int JointCmd::kForceFieldNumber;
const int JointCmd::kPositionFieldNumber;
const int JointCmd::kVelocityFieldNumber;
const int JointCmd::kResetFieldNumber;
#endif  // !_MSC_VER

JointCmd::JointCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointCmd::InitAsDefaultInstance() {
  position_ = const_cast< ::gazebo::msgs::PID*>(&::gazebo::msgs::PID::default_instance());
  velocity_ = const_cast< ::gazebo::msgs::PID*>(&::gazebo::msgs::PID::default_instance());
}

JointCmd::JointCmd(const JointCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointCmd::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  axis_ = 0;
  force_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointCmd::~JointCmd() {
  SharedDtor();
}

void JointCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void JointCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointCmd_descriptor_;
}

const JointCmd& JointCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_5fcmd_2eproto();
  return *default_instance_;
}

JointCmd* JointCmd::default_instance_ = NULL;

JointCmd* JointCmd::New() const {
  return new JointCmd;
}

void JointCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    axis_ = 0;
    force_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::gazebo::msgs::PID::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::gazebo::msgs::PID::Clear();
    }
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_axis;
        break;
      }

      // optional int32 axis = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_force;
        break;
      }

      // optional double force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional .gazebo.msgs.PID position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_velocity;
        break;
      }

      // optional .gazebo.msgs.PID velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reset;
        break;
      }

      // optional bool reset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->axis(), output);
  }

  // optional double force = 3;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->force(), output);
  }

  // optional .gazebo.msgs.PID position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // optional .gazebo.msgs.PID velocity = 5;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->velocity(), output);
  }

  // optional bool reset = 6;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->axis(), target);
  }

  // optional double force = 3;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->force(), target);
  }

  // optional .gazebo.msgs.PID position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // optional .gazebo.msgs.PID velocity = 5;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->velocity(), target);
  }

  // optional bool reset = 6;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 axis = 2 [default = 0];
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis());
    }

    // optional double force = 3;
    if (has_force()) {
      total_size += 1 + 8;
    }

    // optional .gazebo.msgs.PID position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .gazebo.msgs.PID velocity = 5;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional bool reset = 6;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointCmd::MergeFrom(const JointCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_position()) {
      mutable_position()->::gazebo::msgs::PID::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::gazebo::msgs::PID::MergeFrom(from.velocity());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointCmd::CopyFrom(const JointCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JointCmd::Swap(JointCmd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(axis_, other->axis_);
    std::swap(force_, other->force_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointCmd_descriptor_;
  metadata.reflection = JointCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.JointCmd", JointCmd)
// @@protoc_insertion_point(global_scope)
