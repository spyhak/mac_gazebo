// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Joint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Joint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Joint_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_joint_2eproto() {
  protobuf_AddDesc_joint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "joint.proto");
  GOOGLE_CHECK(file != NULL);
  Joint_descriptor_ = file->message_type(0);
  static const int Joint_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, axis1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, axis2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, bounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, fudge_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, limit_cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, limit_erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, suspension_cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, suspension_erp_),
  };
  Joint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Joint_descriptor_,
      Joint::default_instance_,
      Joint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Joint));
  Joint_Type_descriptor_ = Joint_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_joint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Joint_descriptor_, &Joint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joint_2eproto() {
  delete Joint::default_instance_;
  delete Joint_reflection_;
}

void protobuf_AddDesc_joint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_axis_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013joint.proto\022\013gazebo.msgs\032\016vector3d.pro"
    "to\032\naxis.proto\032\npose.proto\"\302\003\n\005Joint\022\014\n\004"
    "name\030\001 \002(\t\022\r\n\005angle\030\002 \003(\001\022%\n\004type\030\003 \001(\0162"
    "\027.gazebo.msgs.Joint.Type\022\016\n\006parent\030\004 \001(\t"
    "\022\r\n\005child\030\005 \001(\t\022\037\n\004pose\030\006 \001(\0132\021.gazebo.m"
    "sgs.Pose\022 \n\005axis1\030\007 \001(\0132\021.gazebo.msgs.Ax"
    "is\022 \n\005axis2\030\010 \001(\0132\021.gazebo.msgs.Axis\022\013\n\003"
    "cfm\030\t \001(\001\022\016\n\006bounce\030\n \001(\001\022\020\n\010velocity\030\013 "
    "\001(\001\022\024\n\014fudge_factor\030\014 \001(\001\022\021\n\tlimit_cfm\030\r"
    " \001(\001\022\021\n\tlimit_erp\030\016 \001(\001\022\026\n\016suspension_cf"
    "m\030\017 \001(\001\022\026\n\016suspension_erp\030\020 \001(\001\"V\n\004Type\022"
    "\014\n\010REVOLUTE\020\001\022\r\n\tREVOLUTE2\020\002\022\r\n\tPRISMATI"
    "C\020\003\022\r\n\tUNIVERSAL\020\004\022\010\n\004BALL\020\005\022\t\n\005SCREW\020\006", 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joint.proto", &protobuf_RegisterTypes);
  Joint::default_instance_ = new Joint();
  Joint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joint_2eproto {
  StaticDescriptorInitializer_joint_2eproto() {
    protobuf_AddDesc_joint_2eproto();
  }
} static_descriptor_initializer_joint_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Joint_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joint_Type_descriptor_;
}
bool Joint_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Joint_Type Joint::REVOLUTE;
const Joint_Type Joint::REVOLUTE2;
const Joint_Type Joint::PRISMATIC;
const Joint_Type Joint::UNIVERSAL;
const Joint_Type Joint::BALL;
const Joint_Type Joint::SCREW;
const Joint_Type Joint::Type_MIN;
const Joint_Type Joint::Type_MAX;
const int Joint::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Joint::kNameFieldNumber;
const int Joint::kAngleFieldNumber;
const int Joint::kTypeFieldNumber;
const int Joint::kParentFieldNumber;
const int Joint::kChildFieldNumber;
const int Joint::kPoseFieldNumber;
const int Joint::kAxis1FieldNumber;
const int Joint::kAxis2FieldNumber;
const int Joint::kCfmFieldNumber;
const int Joint::kBounceFieldNumber;
const int Joint::kVelocityFieldNumber;
const int Joint::kFudgeFactorFieldNumber;
const int Joint::kLimitCfmFieldNumber;
const int Joint::kLimitErpFieldNumber;
const int Joint::kSuspensionCfmFieldNumber;
const int Joint::kSuspensionErpFieldNumber;
#endif  // !_MSC_VER

Joint::Joint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Joint::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  axis1_ = const_cast< ::gazebo::msgs::Axis*>(&::gazebo::msgs::Axis::default_instance());
  axis2_ = const_cast< ::gazebo::msgs::Axis*>(&::gazebo::msgs::Axis::default_instance());
}

Joint::Joint(const Joint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Joint::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  child_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pose_ = NULL;
  axis1_ = NULL;
  axis2_ = NULL;
  cfm_ = 0;
  bounce_ = 0;
  velocity_ = 0;
  fudge_factor_ = 0;
  limit_cfm_ = 0;
  limit_erp_ = 0;
  suspension_cfm_ = 0;
  suspension_erp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Joint::~Joint() {
  SharedDtor();
}

void Joint::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_;
  }
  if (child_ != &::google::protobuf::internal::kEmptyString) {
    delete child_;
  }
  if (this != default_instance_) {
    delete pose_;
    delete axis1_;
    delete axis2_;
  }
}

void Joint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joint_descriptor_;
}

const Joint& Joint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_2eproto();
  return *default_instance_;
}

Joint* Joint::default_instance_ = NULL;

Joint* Joint::New() const {
  return new Joint;
}

void Joint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_parent()) {
      if (parent_ != &::google::protobuf::internal::kEmptyString) {
        parent_->clear();
      }
    }
    if (has_child()) {
      if (child_ != &::google::protobuf::internal::kEmptyString) {
        child_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
    if (has_axis1()) {
      if (axis1_ != NULL) axis1_->::gazebo::msgs::Axis::Clear();
    }
    if (has_axis2()) {
      if (axis2_ != NULL) axis2_->::gazebo::msgs::Axis::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cfm_ = 0;
    bounce_ = 0;
    velocity_ = 0;
    fudge_factor_ = 0;
    limit_cfm_ = 0;
    limit_erp_ = 0;
    suspension_cfm_ = 0;
    suspension_erp_ = 0;
  }
  angle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_angle;
        break;
      }

      // repeated double angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_angle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_angle;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .gazebo.msgs.Joint.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gazebo::msgs::Joint_Type_IsValid(value)) {
            set_type(static_cast< ::gazebo::msgs::Joint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parent;
        break;
      }

      // optional string parent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child;
        break;
      }

      // optional string child = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->child().data(), this->child().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_axis1;
        break;
      }

      // optional .gazebo.msgs.Axis axis1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_axis1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_axis2;
        break;
      }

      // optional .gazebo.msgs.Axis axis2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_axis2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_cfm;
        break;
      }

      // optional double cfm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_bounce;
        break;
      }

      // optional double bounce = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bounce_)));
          set_has_bounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_velocity;
        break;
      }

      // optional double velocity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_fudge_factor;
        break;
      }

      // optional double fudge_factor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fudge_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fudge_factor_)));
          set_has_fudge_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_limit_cfm;
        break;
      }

      // optional double limit_cfm = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_limit_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_cfm_)));
          set_has_limit_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_limit_erp;
        break;
      }

      // optional double limit_erp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_limit_erp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_erp_)));
          set_has_limit_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_suspension_cfm;
        break;
      }

      // optional double suspension_cfm = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_suspension_cfm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &suspension_cfm_)));
          set_has_suspension_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_suspension_erp;
        break;
      }

      // optional double suspension_erp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_suspension_erp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &suspension_erp_)));
          set_has_suspension_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double angle = 2;
  for (int i = 0; i < this->angle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->angle(i), output);
  }

  // optional .gazebo.msgs.Joint.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string parent = 4;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parent(), output);
  }

  // optional string child = 5;
  if (has_child()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->child().data(), this->child().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->child(), output);
  }

  // optional .gazebo.msgs.Pose pose = 6;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pose(), output);
  }

  // optional .gazebo.msgs.Axis axis1 = 7;
  if (has_axis1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->axis1(), output);
  }

  // optional .gazebo.msgs.Axis axis2 = 8;
  if (has_axis2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->axis2(), output);
  }

  // optional double cfm = 9;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cfm(), output);
  }

  // optional double bounce = 10;
  if (has_bounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->bounce(), output);
  }

  // optional double velocity = 11;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->velocity(), output);
  }

  // optional double fudge_factor = 12;
  if (has_fudge_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->fudge_factor(), output);
  }

  // optional double limit_cfm = 13;
  if (has_limit_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->limit_cfm(), output);
  }

  // optional double limit_erp = 14;
  if (has_limit_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->limit_erp(), output);
  }

  // optional double suspension_cfm = 15;
  if (has_suspension_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->suspension_cfm(), output);
  }

  // optional double suspension_erp = 16;
  if (has_suspension_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->suspension_erp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Joint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double angle = 2;
  for (int i = 0; i < this->angle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->angle(i), target);
  }

  // optional .gazebo.msgs.Joint.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string parent = 4;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent(), target);
  }

  // optional string child = 5;
  if (has_child()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->child().data(), this->child().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->child(), target);
  }

  // optional .gazebo.msgs.Pose pose = 6;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pose(), target);
  }

  // optional .gazebo.msgs.Axis axis1 = 7;
  if (has_axis1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->axis1(), target);
  }

  // optional .gazebo.msgs.Axis axis2 = 8;
  if (has_axis2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->axis2(), target);
  }

  // optional double cfm = 9;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cfm(), target);
  }

  // optional double bounce = 10;
  if (has_bounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->bounce(), target);
  }

  // optional double velocity = 11;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->velocity(), target);
  }

  // optional double fudge_factor = 12;
  if (has_fudge_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->fudge_factor(), target);
  }

  // optional double limit_cfm = 13;
  if (has_limit_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->limit_cfm(), target);
  }

  // optional double limit_erp = 14;
  if (has_limit_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->limit_erp(), target);
  }

  // optional double suspension_cfm = 15;
  if (has_suspension_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->suspension_cfm(), target);
  }

  // optional double suspension_erp = 16;
  if (has_suspension_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->suspension_erp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Joint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .gazebo.msgs.Joint.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string parent = 4;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent());
    }

    // optional string child = 5;
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child());
    }

    // optional .gazebo.msgs.Pose pose = 6;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .gazebo.msgs.Axis axis1 = 7;
    if (has_axis1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axis1());
    }

    // optional .gazebo.msgs.Axis axis2 = 8;
    if (has_axis2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axis2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double cfm = 9;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

    // optional double bounce = 10;
    if (has_bounce()) {
      total_size += 1 + 8;
    }

    // optional double velocity = 11;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

    // optional double fudge_factor = 12;
    if (has_fudge_factor()) {
      total_size += 1 + 8;
    }

    // optional double limit_cfm = 13;
    if (has_limit_cfm()) {
      total_size += 1 + 8;
    }

    // optional double limit_erp = 14;
    if (has_limit_erp()) {
      total_size += 1 + 8;
    }

    // optional double suspension_cfm = 15;
    if (has_suspension_cfm()) {
      total_size += 1 + 8;
    }

    // optional double suspension_erp = 16;
    if (has_suspension_erp()) {
      total_size += 2 + 8;
    }

  }
  // repeated double angle = 2;
  {
    int data_size = 0;
    data_size = 8 * this->angle_size();
    total_size += 1 * this->angle_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Joint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Joint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
  GOOGLE_CHECK_NE(&from, this);
  angle_.MergeFrom(from.angle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_child()) {
      set_child(from.child());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_axis1()) {
      mutable_axis1()->::gazebo::msgs::Axis::MergeFrom(from.axis1());
    }
    if (from.has_axis2()) {
      mutable_axis2()->::gazebo::msgs::Axis::MergeFrom(from.axis2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
    if (from.has_bounce()) {
      set_bounce(from.bounce());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_fudge_factor()) {
      set_fudge_factor(from.fudge_factor());
    }
    if (from.has_limit_cfm()) {
      set_limit_cfm(from.limit_cfm());
    }
    if (from.has_limit_erp()) {
      set_limit_erp(from.limit_erp());
    }
    if (from.has_suspension_cfm()) {
      set_suspension_cfm(from.suspension_cfm());
    }
    if (from.has_suspension_erp()) {
      set_suspension_erp(from.suspension_erp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Joint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_axis1()) {
    if (!this->axis1().IsInitialized()) return false;
  }
  if (has_axis2()) {
    if (!this->axis2().IsInitialized()) return false;
  }
  return true;
}

void Joint::Swap(Joint* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    angle_.Swap(&other->angle_);
    std::swap(type_, other->type_);
    std::swap(parent_, other->parent_);
    std::swap(child_, other->child_);
    std::swap(pose_, other->pose_);
    std::swap(axis1_, other->axis1_);
    std::swap(axis2_, other->axis2_);
    std::swap(cfm_, other->cfm_);
    std::swap(bounce_, other->bounce_);
    std::swap(velocity_, other->velocity_);
    std::swap(fudge_factor_, other->fudge_factor_);
    std::swap(limit_cfm_, other->limit_cfm_);
    std::swap(limit_erp_, other->limit_erp_);
    std::swap(suspension_cfm_, other->suspension_cfm_);
    std::swap(suspension_erp_, other->suspension_erp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Joint_descriptor_;
  metadata.reflection = Joint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Joint", Joint)
// @@protoc_insertion_point(global_scope)
