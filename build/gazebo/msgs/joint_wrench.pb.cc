// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_wrench.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joint_wrench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* JointWrench_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointWrench_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_joint_5fwrench_2eproto() {
  protobuf_AddDesc_joint_5fwrench_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "joint_wrench.proto");
  GOOGLE_CHECK(file != NULL);
  JointWrench_descriptor_ = file->message_type(0);
  static const int JointWrench_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_1_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_2_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_1_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_2_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_1_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, body_2_torque_),
  };
  JointWrench_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointWrench_descriptor_,
      JointWrench::default_instance_,
      JointWrench_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointWrench, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointWrench));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_joint_5fwrench_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointWrench_descriptor_, &JointWrench::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joint_5fwrench_2eproto() {
  delete JointWrench::default_instance_;
  delete JointWrench_reflection_;
}

void protobuf_AddDesc_joint_5fwrench_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022joint_wrench.proto\022\013gazebo.msgs\032\016vecto"
    "r3d.proto\"\355\001\n\013JointWrench\022\023\n\013body_1_name"
    "\030\001 \002(\t\022\023\n\013body_2_name\030\002 \002(\t\022+\n\014body_1_fo"
    "rce\030\003 \002(\0132\025.gazebo.msgs.Vector3d\022+\n\014body"
    "_2_force\030\004 \002(\0132\025.gazebo.msgs.Vector3d\022,\n"
    "\rbody_1_torque\030\005 \002(\0132\025.gazebo.msgs.Vecto"
    "r3d\022,\n\rbody_2_torque\030\006 \002(\0132\025.gazebo.msgs"
    ".Vector3d", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joint_wrench.proto", &protobuf_RegisterTypes);
  JointWrench::default_instance_ = new JointWrench();
  JointWrench::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joint_5fwrench_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joint_5fwrench_2eproto {
  StaticDescriptorInitializer_joint_5fwrench_2eproto() {
    protobuf_AddDesc_joint_5fwrench_2eproto();
  }
} static_descriptor_initializer_joint_5fwrench_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int JointWrench::kBody1NameFieldNumber;
const int JointWrench::kBody2NameFieldNumber;
const int JointWrench::kBody1ForceFieldNumber;
const int JointWrench::kBody2ForceFieldNumber;
const int JointWrench::kBody1TorqueFieldNumber;
const int JointWrench::kBody2TorqueFieldNumber;
#endif  // !_MSC_VER

JointWrench::JointWrench()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointWrench::InitAsDefaultInstance() {
  body_1_force_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  body_2_force_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  body_1_torque_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  body_2_torque_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

JointWrench::JointWrench(const JointWrench& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointWrench::SharedCtor() {
  _cached_size_ = 0;
  body_1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_2_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_1_force_ = NULL;
  body_2_force_ = NULL;
  body_1_torque_ = NULL;
  body_2_torque_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointWrench::~JointWrench() {
  SharedDtor();
}

void JointWrench::SharedDtor() {
  if (body_1_name_ != &::google::protobuf::internal::kEmptyString) {
    delete body_1_name_;
  }
  if (body_2_name_ != &::google::protobuf::internal::kEmptyString) {
    delete body_2_name_;
  }
  if (this != default_instance_) {
    delete body_1_force_;
    delete body_2_force_;
    delete body_1_torque_;
    delete body_2_torque_;
  }
}

void JointWrench::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointWrench::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointWrench_descriptor_;
}

const JointWrench& JointWrench::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_5fwrench_2eproto();
  return *default_instance_;
}

JointWrench* JointWrench::default_instance_ = NULL;

JointWrench* JointWrench::New() const {
  return new JointWrench;
}

void JointWrench::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_body_1_name()) {
      if (body_1_name_ != &::google::protobuf::internal::kEmptyString) {
        body_1_name_->clear();
      }
    }
    if (has_body_2_name()) {
      if (body_2_name_ != &::google::protobuf::internal::kEmptyString) {
        body_2_name_->clear();
      }
    }
    if (has_body_1_force()) {
      if (body_1_force_ != NULL) body_1_force_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_body_2_force()) {
      if (body_2_force_ != NULL) body_2_force_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_body_1_torque()) {
      if (body_1_torque_ != NULL) body_1_torque_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_body_2_torque()) {
      if (body_2_torque_ != NULL) body_2_torque_->::gazebo::msgs::Vector3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointWrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string body_1_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body_1_name().data(), this->body_1_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body_2_name;
        break;
      }

      // required string body_2_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_2_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body_2_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body_2_name().data(), this->body_2_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body_1_force;
        break;
      }

      // required .gazebo.msgs.Vector3d body_1_force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_1_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_1_force()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_body_2_force;
        break;
      }

      // required .gazebo.msgs.Vector3d body_2_force = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_2_force:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_2_force()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body_1_torque;
        break;
      }

      // required .gazebo.msgs.Vector3d body_1_torque = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_1_torque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_1_torque()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_body_2_torque;
        break;
      }

      // required .gazebo.msgs.Vector3d body_2_torque = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_2_torque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_2_torque()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointWrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string body_1_name = 1;
  if (has_body_1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_1_name().data(), this->body_1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->body_1_name(), output);
  }

  // required string body_2_name = 2;
  if (has_body_2_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_2_name().data(), this->body_2_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->body_2_name(), output);
  }

  // required .gazebo.msgs.Vector3d body_1_force = 3;
  if (has_body_1_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->body_1_force(), output);
  }

  // required .gazebo.msgs.Vector3d body_2_force = 4;
  if (has_body_2_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->body_2_force(), output);
  }

  // required .gazebo.msgs.Vector3d body_1_torque = 5;
  if (has_body_1_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body_1_torque(), output);
  }

  // required .gazebo.msgs.Vector3d body_2_torque = 6;
  if (has_body_2_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->body_2_torque(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointWrench::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string body_1_name = 1;
  if (has_body_1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_1_name().data(), this->body_1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->body_1_name(), target);
  }

  // required string body_2_name = 2;
  if (has_body_2_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body_2_name().data(), this->body_2_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body_2_name(), target);
  }

  // required .gazebo.msgs.Vector3d body_1_force = 3;
  if (has_body_1_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->body_1_force(), target);
  }

  // required .gazebo.msgs.Vector3d body_2_force = 4;
  if (has_body_2_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->body_2_force(), target);
  }

  // required .gazebo.msgs.Vector3d body_1_torque = 5;
  if (has_body_1_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body_1_torque(), target);
  }

  // required .gazebo.msgs.Vector3d body_2_torque = 6;
  if (has_body_2_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->body_2_torque(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointWrench::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string body_1_name = 1;
    if (has_body_1_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body_1_name());
    }

    // required string body_2_name = 2;
    if (has_body_2_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body_2_name());
    }

    // required .gazebo.msgs.Vector3d body_1_force = 3;
    if (has_body_1_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_1_force());
    }

    // required .gazebo.msgs.Vector3d body_2_force = 4;
    if (has_body_2_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_2_force());
    }

    // required .gazebo.msgs.Vector3d body_1_torque = 5;
    if (has_body_1_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_1_torque());
    }

    // required .gazebo.msgs.Vector3d body_2_torque = 6;
    if (has_body_2_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_2_torque());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointWrench::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointWrench* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointWrench*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointWrench::MergeFrom(const JointWrench& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_body_1_name()) {
      set_body_1_name(from.body_1_name());
    }
    if (from.has_body_2_name()) {
      set_body_2_name(from.body_2_name());
    }
    if (from.has_body_1_force()) {
      mutable_body_1_force()->::gazebo::msgs::Vector3d::MergeFrom(from.body_1_force());
    }
    if (from.has_body_2_force()) {
      mutable_body_2_force()->::gazebo::msgs::Vector3d::MergeFrom(from.body_2_force());
    }
    if (from.has_body_1_torque()) {
      mutable_body_1_torque()->::gazebo::msgs::Vector3d::MergeFrom(from.body_1_torque());
    }
    if (from.has_body_2_torque()) {
      mutable_body_2_torque()->::gazebo::msgs::Vector3d::MergeFrom(from.body_2_torque());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointWrench::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointWrench::CopyFrom(const JointWrench& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointWrench::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_body_1_force()) {
    if (!this->body_1_force().IsInitialized()) return false;
  }
  if (has_body_2_force()) {
    if (!this->body_2_force().IsInitialized()) return false;
  }
  if (has_body_1_torque()) {
    if (!this->body_1_torque().IsInitialized()) return false;
  }
  if (has_body_2_torque()) {
    if (!this->body_2_torque().IsInitialized()) return false;
  }
  return true;
}

void JointWrench::Swap(JointWrench* other) {
  if (other != this) {
    std::swap(body_1_name_, other->body_1_name_);
    std::swap(body_2_name_, other->body_2_name_);
    std::swap(body_1_force_, other->body_1_force_);
    std::swap(body_2_force_, other->body_2_force_);
    std::swap(body_1_torque_, other->body_1_torque_);
    std::swap(body_2_torque_, other->body_2_torque_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointWrench::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointWrench_descriptor_;
  metadata.reflection = JointWrench_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.JointWrench", JointWrench)
// @@protoc_insertion_point(global_scope)
