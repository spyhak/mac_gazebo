// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: axis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "axis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Axis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Axis_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_axis_2eproto() {
  protobuf_AddDesc_axis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "axis.proto");
  GOOGLE_CHECK(file != NULL);
  Axis_descriptor_ = file->message_type(0);
  static const int Axis_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, xyz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, limit_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, limit_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, limit_effort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, limit_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, damping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, friction_),
  };
  Axis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Axis_descriptor_,
      Axis::default_instance_,
      Axis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Axis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Axis));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_axis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Axis_descriptor_, &Axis::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_axis_2eproto() {
  delete Axis::default_instance_;
  delete Axis_reflection_;
}

void protobuf_AddDesc_axis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\naxis.proto\022\013gazebo.msgs\032\016vector3d.prot"
    "o\"\245\001\n\004Axis\022\"\n\003xyz\030\001 \002(\0132\025.gazebo.msgs.Ve"
    "ctor3d\022\023\n\013limit_lower\030\002 \002(\001\022\023\n\013limit_upp"
    "er\030\003 \002(\001\022\024\n\014limit_effort\030\004 \002(\001\022\026\n\016limit_"
    "velocity\030\005 \002(\001\022\017\n\007damping\030\006 \002(\001\022\020\n\010frict"
    "ion\030\007 \002(\001", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "axis.proto", &protobuf_RegisterTypes);
  Axis::default_instance_ = new Axis();
  Axis::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_axis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_axis_2eproto {
  StaticDescriptorInitializer_axis_2eproto() {
    protobuf_AddDesc_axis_2eproto();
  }
} static_descriptor_initializer_axis_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Axis::kXyzFieldNumber;
const int Axis::kLimitLowerFieldNumber;
const int Axis::kLimitUpperFieldNumber;
const int Axis::kLimitEffortFieldNumber;
const int Axis::kLimitVelocityFieldNumber;
const int Axis::kDampingFieldNumber;
const int Axis::kFrictionFieldNumber;
#endif  // !_MSC_VER

Axis::Axis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Axis::InitAsDefaultInstance() {
  xyz_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

Axis::Axis(const Axis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Axis::SharedCtor() {
  _cached_size_ = 0;
  xyz_ = NULL;
  limit_lower_ = 0;
  limit_upper_ = 0;
  limit_effort_ = 0;
  limit_velocity_ = 0;
  damping_ = 0;
  friction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Axis::~Axis() {
  SharedDtor();
}

void Axis::SharedDtor() {
  if (this != default_instance_) {
    delete xyz_;
  }
}

void Axis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Axis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Axis_descriptor_;
}

const Axis& Axis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_axis_2eproto();
  return *default_instance_;
}

Axis* Axis::default_instance_ = NULL;

Axis* Axis::New() const {
  return new Axis;
}

void Axis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_xyz()) {
      if (xyz_ != NULL) xyz_->::gazebo::msgs::Vector3d::Clear();
    }
    limit_lower_ = 0;
    limit_upper_ = 0;
    limit_effort_ = 0;
    limit_velocity_ = 0;
    damping_ = 0;
    friction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d xyz = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xyz()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_limit_lower;
        break;
      }

      // required double limit_lower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_limit_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_lower_)));
          set_has_limit_lower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_limit_upper;
        break;
      }

      // required double limit_upper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_limit_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_upper_)));
          set_has_limit_upper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_limit_effort;
        break;
      }

      // required double limit_effort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_limit_effort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_effort_)));
          set_has_limit_effort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_limit_velocity;
        break;
      }

      // required double limit_velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_limit_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_velocity_)));
          set_has_limit_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_damping;
        break;
      }

      // required double damping = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_damping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damping_)));
          set_has_damping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_friction;
        break;
      }

      // required double friction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_friction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &friction_)));
          set_has_friction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gazebo.msgs.Vector3d xyz = 1;
  if (has_xyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xyz(), output);
  }

  // required double limit_lower = 2;
  if (has_limit_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->limit_lower(), output);
  }

  // required double limit_upper = 3;
  if (has_limit_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->limit_upper(), output);
  }

  // required double limit_effort = 4;
  if (has_limit_effort()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->limit_effort(), output);
  }

  // required double limit_velocity = 5;
  if (has_limit_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->limit_velocity(), output);
  }

  // required double damping = 6;
  if (has_damping()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->damping(), output);
  }

  // required double friction = 7;
  if (has_friction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->friction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Axis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gazebo.msgs.Vector3d xyz = 1;
  if (has_xyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xyz(), target);
  }

  // required double limit_lower = 2;
  if (has_limit_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->limit_lower(), target);
  }

  // required double limit_upper = 3;
  if (has_limit_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->limit_upper(), target);
  }

  // required double limit_effort = 4;
  if (has_limit_effort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->limit_effort(), target);
  }

  // required double limit_velocity = 5;
  if (has_limit_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->limit_velocity(), target);
  }

  // required double damping = 6;
  if (has_damping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->damping(), target);
  }

  // required double friction = 7;
  if (has_friction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->friction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Axis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Vector3d xyz = 1;
    if (has_xyz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xyz());
    }

    // required double limit_lower = 2;
    if (has_limit_lower()) {
      total_size += 1 + 8;
    }

    // required double limit_upper = 3;
    if (has_limit_upper()) {
      total_size += 1 + 8;
    }

    // required double limit_effort = 4;
    if (has_limit_effort()) {
      total_size += 1 + 8;
    }

    // required double limit_velocity = 5;
    if (has_limit_velocity()) {
      total_size += 1 + 8;
    }

    // required double damping = 6;
    if (has_damping()) {
      total_size += 1 + 8;
    }

    // required double friction = 7;
    if (has_friction()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Axis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Axis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Axis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Axis::MergeFrom(const Axis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xyz()) {
      mutable_xyz()->::gazebo::msgs::Vector3d::MergeFrom(from.xyz());
    }
    if (from.has_limit_lower()) {
      set_limit_lower(from.limit_lower());
    }
    if (from.has_limit_upper()) {
      set_limit_upper(from.limit_upper());
    }
    if (from.has_limit_effort()) {
      set_limit_effort(from.limit_effort());
    }
    if (from.has_limit_velocity()) {
      set_limit_velocity(from.limit_velocity());
    }
    if (from.has_damping()) {
      set_damping(from.damping());
    }
    if (from.has_friction()) {
      set_friction(from.friction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Axis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axis::CopyFrom(const Axis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_xyz()) {
    if (!this->xyz().IsInitialized()) return false;
  }
  return true;
}

void Axis::Swap(Axis* other) {
  if (other != this) {
    std::swap(xyz_, other->xyz_);
    std::swap(limit_lower_, other->limit_lower_);
    std::swap(limit_upper_, other->limit_upper_);
    std::swap(limit_effort_, other->limit_effort_);
    std::swap(limit_velocity_, other->limit_velocity_);
    std::swap(damping_, other->damping_);
    std::swap(friction_, other->friction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Axis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Axis_descriptor_;
  metadata.reflection = Axis_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Axis", Axis)
// @@protoc_insertion_point(global_scope)
