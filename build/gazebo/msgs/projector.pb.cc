// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "projector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Projector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Projector_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_projector_2eproto() {
  protobuf_AddDesc_projector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "projector.proto");
  GOOGLE_CHECK(file != NULL);
  Projector_descriptor_ = file->message_type(0);
  static const int Projector_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, fov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, near_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, far_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, enabled_),
  };
  Projector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Projector_descriptor_,
      Projector::default_instance_,
      Projector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Projector));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_projector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Projector_descriptor_, &Projector::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_projector_2eproto() {
  delete Projector::default_instance_;
  delete Projector_reflection_;
}

void protobuf_AddDesc_projector_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017projector.proto\022\013gazebo.msgs\032\npose.pro"
    "to\"\244\001\n\tProjector\022\014\n\004name\030\001 \002(\t\022\017\n\007textur"
    "e\030\002 \001(\t\022\037\n\004pose\030\003 \001(\0132\021.gazebo.msgs.Pose"
    "\022\022\n\003fov\030\004 \001(\001:\0050.785\022\026\n\tnear_clip\030\005 \001(\001:"
    "\0030.1\022\024\n\010far_clip\030\006 \001(\001:\00210\022\025\n\007enabled\030\007 "
    "\001(\010:\004true", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "projector.proto", &protobuf_RegisterTypes);
  Projector::default_instance_ = new Projector();
  Projector::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_projector_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_projector_2eproto {
  StaticDescriptorInitializer_projector_2eproto() {
    protobuf_AddDesc_projector_2eproto();
  }
} static_descriptor_initializer_projector_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Projector::kNameFieldNumber;
const int Projector::kTextureFieldNumber;
const int Projector::kPoseFieldNumber;
const int Projector::kFovFieldNumber;
const int Projector::kNearClipFieldNumber;
const int Projector::kFarClipFieldNumber;
const int Projector::kEnabledFieldNumber;
#endif  // !_MSC_VER

Projector::Projector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Projector::InitAsDefaultInstance() {
  pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

Projector::Projector(const Projector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Projector::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  texture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pose_ = NULL;
  fov_ = 0.785;
  near_clip_ = 0.1;
  far_clip_ = 10;
  enabled_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Projector::~Projector() {
  SharedDtor();
}

void Projector::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (texture_ != &::google::protobuf::internal::kEmptyString) {
    delete texture_;
  }
  if (this != default_instance_) {
    delete pose_;
  }
}

void Projector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Projector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Projector_descriptor_;
}

const Projector& Projector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projector_2eproto();
  return *default_instance_;
}

Projector* Projector::default_instance_ = NULL;

Projector* Projector::New() const {
  return new Projector;
}

void Projector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_texture()) {
      if (texture_ != &::google::protobuf::internal::kEmptyString) {
        texture_->clear();
      }
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::gazebo::msgs::Pose::Clear();
    }
    fov_ = 0.785;
    near_clip_ = 0.1;
    far_clip_ = 10;
    enabled_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Projector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_texture;
        break;
      }

      // optional string texture = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->texture().data(), this->texture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // optional .gazebo.msgs.Pose pose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_fov;
        break;
      }

      // optional double fov = 4 [default = 0.785];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fov_)));
          set_has_fov();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_near_clip;
        break;
      }

      // optional double near_clip = 5 [default = 0.1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_near_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &near_clip_)));
          set_has_near_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_far_clip;
        break;
      }

      // optional double far_clip = 6 [default = 10];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_far_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &far_clip_)));
          set_has_far_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Projector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string texture = 2;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->texture(), output);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pose(), output);
  }

  // optional double fov = 4 [default = 0.785];
  if (has_fov()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->fov(), output);
  }

  // optional double near_clip = 5 [default = 0.1];
  if (has_near_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->near_clip(), output);
  }

  // optional double far_clip = 6 [default = 10];
  if (has_far_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->far_clip(), output);
  }

  // optional bool enabled = 7 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Projector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string texture = 2;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->texture(), target);
  }

  // optional .gazebo.msgs.Pose pose = 3;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pose(), target);
  }

  // optional double fov = 4 [default = 0.785];
  if (has_fov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->fov(), target);
  }

  // optional double near_clip = 5 [default = 0.1];
  if (has_near_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->near_clip(), target);
  }

  // optional double far_clip = 6 [default = 10];
  if (has_far_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->far_clip(), target);
  }

  // optional bool enabled = 7 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Projector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string texture = 2;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texture());
    }

    // optional .gazebo.msgs.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional double fov = 4 [default = 0.785];
    if (has_fov()) {
      total_size += 1 + 8;
    }

    // optional double near_clip = 5 [default = 0.1];
    if (has_near_clip()) {
      total_size += 1 + 8;
    }

    // optional double far_clip = 6 [default = 10];
    if (has_far_clip()) {
      total_size += 1 + 8;
    }

    // optional bool enabled = 7 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Projector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Projector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Projector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Projector::MergeFrom(const Projector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_texture()) {
      set_texture(from.texture());
    }
    if (from.has_pose()) {
      mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_fov()) {
      set_fov(from.fov());
    }
    if (from.has_near_clip()) {
      set_near_clip(from.near_clip());
    }
    if (from.has_far_clip()) {
      set_far_clip(from.far_clip());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Projector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projector::CopyFrom(const Projector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Projector::Swap(Projector* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(texture_, other->texture_);
    std::swap(pose_, other->pose_);
    std::swap(fov_, other->fov_);
    std::swap(near_clip_, other->near_clip_);
    std::swap(far_clip_, other->far_clip_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Projector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Projector_descriptor_;
  metadata.reflection = Projector_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.Projector", Projector)
// @@protoc_insertion_point(global_scope)
