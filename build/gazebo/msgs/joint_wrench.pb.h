// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint_wrench.proto

#ifndef PROTOBUF_joint_5fwrench_2eproto__INCLUDED
#define PROTOBUF_joint_5fwrench_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_joint_5fwrench_2eproto();
void protobuf_AssignDesc_joint_5fwrench_2eproto();
void protobuf_ShutdownFile_joint_5fwrench_2eproto();

class JointWrench;

// ===================================================================

class JointWrench : public ::google::protobuf::Message {
 public:
  JointWrench();
  virtual ~JointWrench();

  JointWrench(const JointWrench& from);

  inline JointWrench& operator=(const JointWrench& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JointWrench& default_instance();

  void Swap(JointWrench* other);

  // implements Message ----------------------------------------------

  JointWrench* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JointWrench& from);
  void MergeFrom(const JointWrench& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string body_1_name = 1;
  inline bool has_body_1_name() const;
  inline void clear_body_1_name();
  static const int kBody1NameFieldNumber = 1;
  inline const ::std::string& body_1_name() const;
  inline void set_body_1_name(const ::std::string& value);
  inline void set_body_1_name(const char* value);
  inline void set_body_1_name(const char* value, size_t size);
  inline ::std::string* mutable_body_1_name();
  inline ::std::string* release_body_1_name();
  inline void set_allocated_body_1_name(::std::string* body_1_name);

  // required string body_2_name = 2;
  inline bool has_body_2_name() const;
  inline void clear_body_2_name();
  static const int kBody2NameFieldNumber = 2;
  inline const ::std::string& body_2_name() const;
  inline void set_body_2_name(const ::std::string& value);
  inline void set_body_2_name(const char* value);
  inline void set_body_2_name(const char* value, size_t size);
  inline ::std::string* mutable_body_2_name();
  inline ::std::string* release_body_2_name();
  inline void set_allocated_body_2_name(::std::string* body_2_name);

  // required .gazebo.msgs.Vector3d body_1_force = 3;
  inline bool has_body_1_force() const;
  inline void clear_body_1_force();
  static const int kBody1ForceFieldNumber = 3;
  inline const ::gazebo::msgs::Vector3d& body_1_force() const;
  inline ::gazebo::msgs::Vector3d* mutable_body_1_force();
  inline ::gazebo::msgs::Vector3d* release_body_1_force();
  inline void set_allocated_body_1_force(::gazebo::msgs::Vector3d* body_1_force);

  // required .gazebo.msgs.Vector3d body_2_force = 4;
  inline bool has_body_2_force() const;
  inline void clear_body_2_force();
  static const int kBody2ForceFieldNumber = 4;
  inline const ::gazebo::msgs::Vector3d& body_2_force() const;
  inline ::gazebo::msgs::Vector3d* mutable_body_2_force();
  inline ::gazebo::msgs::Vector3d* release_body_2_force();
  inline void set_allocated_body_2_force(::gazebo::msgs::Vector3d* body_2_force);

  // required .gazebo.msgs.Vector3d body_1_torque = 5;
  inline bool has_body_1_torque() const;
  inline void clear_body_1_torque();
  static const int kBody1TorqueFieldNumber = 5;
  inline const ::gazebo::msgs::Vector3d& body_1_torque() const;
  inline ::gazebo::msgs::Vector3d* mutable_body_1_torque();
  inline ::gazebo::msgs::Vector3d* release_body_1_torque();
  inline void set_allocated_body_1_torque(::gazebo::msgs::Vector3d* body_1_torque);

  // required .gazebo.msgs.Vector3d body_2_torque = 6;
  inline bool has_body_2_torque() const;
  inline void clear_body_2_torque();
  static const int kBody2TorqueFieldNumber = 6;
  inline const ::gazebo::msgs::Vector3d& body_2_torque() const;
  inline ::gazebo::msgs::Vector3d* mutable_body_2_torque();
  inline ::gazebo::msgs::Vector3d* release_body_2_torque();
  inline void set_allocated_body_2_torque(::gazebo::msgs::Vector3d* body_2_torque);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.JointWrench)
 private:
  inline void set_has_body_1_name();
  inline void clear_has_body_1_name();
  inline void set_has_body_2_name();
  inline void clear_has_body_2_name();
  inline void set_has_body_1_force();
  inline void clear_has_body_1_force();
  inline void set_has_body_2_force();
  inline void clear_has_body_2_force();
  inline void set_has_body_1_torque();
  inline void clear_has_body_1_torque();
  inline void set_has_body_2_torque();
  inline void clear_has_body_2_torque();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* body_1_name_;
  ::std::string* body_2_name_;
  ::gazebo::msgs::Vector3d* body_1_force_;
  ::gazebo::msgs::Vector3d* body_2_force_;
  ::gazebo::msgs::Vector3d* body_1_torque_;
  ::gazebo::msgs::Vector3d* body_2_torque_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_joint_5fwrench_2eproto();
  friend void protobuf_AssignDesc_joint_5fwrench_2eproto();
  friend void protobuf_ShutdownFile_joint_5fwrench_2eproto();

  void InitAsDefaultInstance();
  static JointWrench* default_instance_;
};
// ===================================================================


// ===================================================================

// JointWrench

// required string body_1_name = 1;
inline bool JointWrench::has_body_1_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointWrench::set_has_body_1_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JointWrench::clear_has_body_1_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JointWrench::clear_body_1_name() {
  if (body_1_name_ != &::google::protobuf::internal::kEmptyString) {
    body_1_name_->clear();
  }
  clear_has_body_1_name();
}
inline const ::std::string& JointWrench::body_1_name() const {
  return *body_1_name_;
}
inline void JointWrench::set_body_1_name(const ::std::string& value) {
  set_has_body_1_name();
  if (body_1_name_ == &::google::protobuf::internal::kEmptyString) {
    body_1_name_ = new ::std::string;
  }
  body_1_name_->assign(value);
}
inline void JointWrench::set_body_1_name(const char* value) {
  set_has_body_1_name();
  if (body_1_name_ == &::google::protobuf::internal::kEmptyString) {
    body_1_name_ = new ::std::string;
  }
  body_1_name_->assign(value);
}
inline void JointWrench::set_body_1_name(const char* value, size_t size) {
  set_has_body_1_name();
  if (body_1_name_ == &::google::protobuf::internal::kEmptyString) {
    body_1_name_ = new ::std::string;
  }
  body_1_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JointWrench::mutable_body_1_name() {
  set_has_body_1_name();
  if (body_1_name_ == &::google::protobuf::internal::kEmptyString) {
    body_1_name_ = new ::std::string;
  }
  return body_1_name_;
}
inline ::std::string* JointWrench::release_body_1_name() {
  clear_has_body_1_name();
  if (body_1_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_1_name_;
    body_1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JointWrench::set_allocated_body_1_name(::std::string* body_1_name) {
  if (body_1_name_ != &::google::protobuf::internal::kEmptyString) {
    delete body_1_name_;
  }
  if (body_1_name) {
    set_has_body_1_name();
    body_1_name_ = body_1_name;
  } else {
    clear_has_body_1_name();
    body_1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string body_2_name = 2;
inline bool JointWrench::has_body_2_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JointWrench::set_has_body_2_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JointWrench::clear_has_body_2_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JointWrench::clear_body_2_name() {
  if (body_2_name_ != &::google::protobuf::internal::kEmptyString) {
    body_2_name_->clear();
  }
  clear_has_body_2_name();
}
inline const ::std::string& JointWrench::body_2_name() const {
  return *body_2_name_;
}
inline void JointWrench::set_body_2_name(const ::std::string& value) {
  set_has_body_2_name();
  if (body_2_name_ == &::google::protobuf::internal::kEmptyString) {
    body_2_name_ = new ::std::string;
  }
  body_2_name_->assign(value);
}
inline void JointWrench::set_body_2_name(const char* value) {
  set_has_body_2_name();
  if (body_2_name_ == &::google::protobuf::internal::kEmptyString) {
    body_2_name_ = new ::std::string;
  }
  body_2_name_->assign(value);
}
inline void JointWrench::set_body_2_name(const char* value, size_t size) {
  set_has_body_2_name();
  if (body_2_name_ == &::google::protobuf::internal::kEmptyString) {
    body_2_name_ = new ::std::string;
  }
  body_2_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JointWrench::mutable_body_2_name() {
  set_has_body_2_name();
  if (body_2_name_ == &::google::protobuf::internal::kEmptyString) {
    body_2_name_ = new ::std::string;
  }
  return body_2_name_;
}
inline ::std::string* JointWrench::release_body_2_name() {
  clear_has_body_2_name();
  if (body_2_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_2_name_;
    body_2_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JointWrench::set_allocated_body_2_name(::std::string* body_2_name) {
  if (body_2_name_ != &::google::protobuf::internal::kEmptyString) {
    delete body_2_name_;
  }
  if (body_2_name) {
    set_has_body_2_name();
    body_2_name_ = body_2_name;
  } else {
    clear_has_body_2_name();
    body_2_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .gazebo.msgs.Vector3d body_1_force = 3;
inline bool JointWrench::has_body_1_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JointWrench::set_has_body_1_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JointWrench::clear_has_body_1_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JointWrench::clear_body_1_force() {
  if (body_1_force_ != NULL) body_1_force_->::gazebo::msgs::Vector3d::Clear();
  clear_has_body_1_force();
}
inline const ::gazebo::msgs::Vector3d& JointWrench::body_1_force() const {
  return body_1_force_ != NULL ? *body_1_force_ : *default_instance_->body_1_force_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::mutable_body_1_force() {
  set_has_body_1_force();
  if (body_1_force_ == NULL) body_1_force_ = new ::gazebo::msgs::Vector3d;
  return body_1_force_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::release_body_1_force() {
  clear_has_body_1_force();
  ::gazebo::msgs::Vector3d* temp = body_1_force_;
  body_1_force_ = NULL;
  return temp;
}
inline void JointWrench::set_allocated_body_1_force(::gazebo::msgs::Vector3d* body_1_force) {
  delete body_1_force_;
  body_1_force_ = body_1_force;
  if (body_1_force) {
    set_has_body_1_force();
  } else {
    clear_has_body_1_force();
  }
}

// required .gazebo.msgs.Vector3d body_2_force = 4;
inline bool JointWrench::has_body_2_force() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JointWrench::set_has_body_2_force() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JointWrench::clear_has_body_2_force() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JointWrench::clear_body_2_force() {
  if (body_2_force_ != NULL) body_2_force_->::gazebo::msgs::Vector3d::Clear();
  clear_has_body_2_force();
}
inline const ::gazebo::msgs::Vector3d& JointWrench::body_2_force() const {
  return body_2_force_ != NULL ? *body_2_force_ : *default_instance_->body_2_force_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::mutable_body_2_force() {
  set_has_body_2_force();
  if (body_2_force_ == NULL) body_2_force_ = new ::gazebo::msgs::Vector3d;
  return body_2_force_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::release_body_2_force() {
  clear_has_body_2_force();
  ::gazebo::msgs::Vector3d* temp = body_2_force_;
  body_2_force_ = NULL;
  return temp;
}
inline void JointWrench::set_allocated_body_2_force(::gazebo::msgs::Vector3d* body_2_force) {
  delete body_2_force_;
  body_2_force_ = body_2_force;
  if (body_2_force) {
    set_has_body_2_force();
  } else {
    clear_has_body_2_force();
  }
}

// required .gazebo.msgs.Vector3d body_1_torque = 5;
inline bool JointWrench::has_body_1_torque() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JointWrench::set_has_body_1_torque() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JointWrench::clear_has_body_1_torque() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JointWrench::clear_body_1_torque() {
  if (body_1_torque_ != NULL) body_1_torque_->::gazebo::msgs::Vector3d::Clear();
  clear_has_body_1_torque();
}
inline const ::gazebo::msgs::Vector3d& JointWrench::body_1_torque() const {
  return body_1_torque_ != NULL ? *body_1_torque_ : *default_instance_->body_1_torque_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::mutable_body_1_torque() {
  set_has_body_1_torque();
  if (body_1_torque_ == NULL) body_1_torque_ = new ::gazebo::msgs::Vector3d;
  return body_1_torque_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::release_body_1_torque() {
  clear_has_body_1_torque();
  ::gazebo::msgs::Vector3d* temp = body_1_torque_;
  body_1_torque_ = NULL;
  return temp;
}
inline void JointWrench::set_allocated_body_1_torque(::gazebo::msgs::Vector3d* body_1_torque) {
  delete body_1_torque_;
  body_1_torque_ = body_1_torque;
  if (body_1_torque) {
    set_has_body_1_torque();
  } else {
    clear_has_body_1_torque();
  }
}

// required .gazebo.msgs.Vector3d body_2_torque = 6;
inline bool JointWrench::has_body_2_torque() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JointWrench::set_has_body_2_torque() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JointWrench::clear_has_body_2_torque() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JointWrench::clear_body_2_torque() {
  if (body_2_torque_ != NULL) body_2_torque_->::gazebo::msgs::Vector3d::Clear();
  clear_has_body_2_torque();
}
inline const ::gazebo::msgs::Vector3d& JointWrench::body_2_torque() const {
  return body_2_torque_ != NULL ? *body_2_torque_ : *default_instance_->body_2_torque_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::mutable_body_2_torque() {
  set_has_body_2_torque();
  if (body_2_torque_ == NULL) body_2_torque_ = new ::gazebo::msgs::Vector3d;
  return body_2_torque_;
}
inline ::gazebo::msgs::Vector3d* JointWrench::release_body_2_torque() {
  clear_has_body_2_torque();
  ::gazebo::msgs::Vector3d* temp = body_2_torque_;
  body_2_torque_ = NULL;
  return temp;
}
inline void JointWrench::set_allocated_body_2_torque(::gazebo::msgs::Vector3d* body_2_torque) {
  delete body_2_torque_;
  body_2_torque_ = body_2_torque;
  if (body_2_torque) {
    set_has_body_2_torque();
  } else {
    clear_has_body_2_torque();
  }
}


typedef boost::shared_ptr<gazebo::msgs::JointWrench> JointWrenchPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const boost::shared_ptr<gazebo::msgs::JointWrench const> ConstJointWrenchPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_joint_5fwrench_2eproto__INCLUDED
