// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* ServerControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerControl_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fcontrol_2eproto() {
  protobuf_AddDesc_server_5fcontrol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_control.proto");
  GOOGLE_CHECK(file != NULL);
  ServerControl_descriptor_ = file->message_type(0);
  static const int ServerControl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerControl, save_world_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerControl, save_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerControl, open_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerControl, new_world_),
  };
  ServerControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerControl_descriptor_,
      ServerControl::default_instance_,
      ServerControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerControl));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fcontrol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerControl_descriptor_, &ServerControl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5fcontrol_2eproto() {
  delete ServerControl::default_instance_;
  delete ServerControl_reflection_;
}

void protobuf_AddDesc_server_5fcontrol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_header_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024server_control.proto\022\013gazebo.msgs\032\014hea"
    "der.proto\"i\n\rServerControl\022\027\n\017save_world"
    "_name\030\001 \001(\t\022\025\n\rsave_filename\030\002 \001(\t\022\025\n\rop"
    "en_filename\030\003 \001(\t\022\021\n\tnew_world\030\004 \001(\010", 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_control.proto", &protobuf_RegisterTypes);
  ServerControl::default_instance_ = new ServerControl();
  ServerControl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fcontrol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fcontrol_2eproto {
  StaticDescriptorInitializer_server_5fcontrol_2eproto() {
    protobuf_AddDesc_server_5fcontrol_2eproto();
  }
} static_descriptor_initializer_server_5fcontrol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServerControl::kSaveWorldNameFieldNumber;
const int ServerControl::kSaveFilenameFieldNumber;
const int ServerControl::kOpenFilenameFieldNumber;
const int ServerControl::kNewWorldFieldNumber;
#endif  // !_MSC_VER

ServerControl::ServerControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerControl::InitAsDefaultInstance() {
}

ServerControl::ServerControl(const ServerControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerControl::SharedCtor() {
  _cached_size_ = 0;
  save_world_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  save_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_world_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerControl::~ServerControl() {
  SharedDtor();
}

void ServerControl::SharedDtor() {
  if (save_world_name_ != &::google::protobuf::internal::kEmptyString) {
    delete save_world_name_;
  }
  if (save_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete save_filename_;
  }
  if (open_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete open_filename_;
  }
  if (this != default_instance_) {
  }
}

void ServerControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerControl_descriptor_;
}

const ServerControl& ServerControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fcontrol_2eproto();
  return *default_instance_;
}

ServerControl* ServerControl::default_instance_ = NULL;

ServerControl* ServerControl::New() const {
  return new ServerControl;
}

void ServerControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_save_world_name()) {
      if (save_world_name_ != &::google::protobuf::internal::kEmptyString) {
        save_world_name_->clear();
      }
    }
    if (has_save_filename()) {
      if (save_filename_ != &::google::protobuf::internal::kEmptyString) {
        save_filename_->clear();
      }
    }
    if (has_open_filename()) {
      if (open_filename_ != &::google::protobuf::internal::kEmptyString) {
        open_filename_->clear();
      }
    }
    new_world_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string save_world_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_world_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->save_world_name().data(), this->save_world_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_save_filename;
        break;
      }

      // optional string save_filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->save_filename().data(), this->save_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_open_filename;
        break;
      }

      // optional string open_filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_filename().data(), this->open_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_world;
        break;
      }

      // optional bool new_world = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_world_)));
          set_has_new_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string save_world_name = 1;
  if (has_save_world_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_world_name().data(), this->save_world_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->save_world_name(), output);
  }

  // optional string save_filename = 2;
  if (has_save_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_filename().data(), this->save_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->save_filename(), output);
  }

  // optional string open_filename = 3;
  if (has_open_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_filename().data(), this->open_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->open_filename(), output);
  }

  // optional bool new_world = 4;
  if (has_new_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->new_world(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string save_world_name = 1;
  if (has_save_world_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_world_name().data(), this->save_world_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->save_world_name(), target);
  }

  // optional string save_filename = 2;
  if (has_save_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_filename().data(), this->save_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->save_filename(), target);
  }

  // optional string open_filename = 3;
  if (has_open_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_filename().data(), this->open_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->open_filename(), target);
  }

  // optional bool new_world = 4;
  if (has_new_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->new_world(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string save_world_name = 1;
    if (has_save_world_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_world_name());
    }

    // optional string save_filename = 2;
    if (has_save_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_filename());
    }

    // optional string open_filename = 3;
    if (has_open_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_filename());
    }

    // optional bool new_world = 4;
    if (has_new_world()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerControl::MergeFrom(const ServerControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save_world_name()) {
      set_save_world_name(from.save_world_name());
    }
    if (from.has_save_filename()) {
      set_save_filename(from.save_filename());
    }
    if (from.has_open_filename()) {
      set_open_filename(from.open_filename());
    }
    if (from.has_new_world()) {
      set_new_world(from.new_world());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerControl::CopyFrom(const ServerControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerControl::IsInitialized() const {

  return true;
}

void ServerControl::Swap(ServerControl* other) {
  if (other != this) {
    std::swap(save_world_name_, other->save_world_name_);
    std::swap(save_filename_, other->save_filename_);
    std::swap(open_filename_, other->open_filename_);
    std::swap(new_world_, other->new_world_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerControl_descriptor_;
  metadata.reflection = ServerControl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.ServerControl", ServerControl)
// @@protoc_insertion_point(global_scope)
